{"version":3,"sources":["CardInput.tsx"],"names":["CardInput","name","maskProps","refInput","onChange","style","props","handleChange","React","useCallback","text","value","toUpperCase","setRef","inputRef","ref","current","InputComponent","TextInputMask","TextInput","customProps","top","bottom","left","right"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAUA,MAAMA,SAAc,GAAG,CAAC;AACtBC,EAAAA,IADsB;AAEtBC,EAAAA,SAFsB;AAGtBC,EAAAA,QAHsB;AAItBC,EAAAA,QAAQ,GAAG,MAAM,CAAE,CAJG;AAKtBC,EAAAA,KALsB;AAMtB,KAAGC;AANmB,CAAD,KAOD;AACpB,QAAMC,YAAY,GAAGC,eAAMC,WAAN,CAClBC,IAAD,IAAU;AACR,UAAMC,KAAK,GAAGD,IAAI,CAACE,WAAL,EAAd;AACA,WAAOR,QAAQ,CAACH,IAAD,EAAOU,KAAP,CAAf;AACD,GAJkB,EAKnB,CAACV,IAAD,EAAOG,QAAP,CALmB,CAArB;;AAQA,QAAMS,MAAM,GAAG,CAACC,QAAD,EAAgBC,GAAhB,KAA6B;AAC1C,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,CAACC,OAAJ,GAAcF,QAAd;AACD;AACF,GAJD;;AAMA,QAAMG,cAAmB,GAAGf,SAAS,GAAGgB,oCAAH,GAAmBC,sBAAxD;AACA,QAAMC,WAAW,GAAGlB,SAAS,GACzB;AAAEC,IAAAA,QAAQ,EAAGY,GAAD,IAAcF,MAAM,CAACE,GAAD,EAAMZ,QAAN;AAAhC,GADyB,GAEzB;AAAEY,IAAAA,GAAG,EAAEZ;AAAP,GAFJ;AAIA,sBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,OAAO,EAAE;AAAEc,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,MAAM,EAAE,EAAnB;AAAuBC,MAAAA,IAAI,EAAE,CAA7B;AAAgCC,MAAAA,KAAK,EAAE;AAAvC;AAHX,KAIMtB,SAJN,EAKMI,KALN,EAMMc,WANN,EADF;AAUD,CArCD;;eAuCepB,S","sourcesContent":["import React from 'react';\nimport { TextInputMask, TextInputMaskProps } from 'react-native-masked-text';\nimport { TextInputProps, TextInput } from 'react-native';\n\nexport type CardInputProps = {\n  name: string;\n  onChange: (name: string, text: string) => void | null;\n  maskProps: TextInputMaskProps;\n  placeholderTextColor: string;\n  refInput: React.MutableRefObject<any>;\n} & TextInputProps;\n\nconst CardInput: any = ({\n  name,\n  maskProps,\n  refInput,\n  onChange = () => {},\n  style,\n  ...props\n}: CardInputProps) => {\n  const handleChange = React.useCallback(\n    (text) => {\n      const value = text.toUpperCase();\n      return onChange(name, value);\n    },\n    [name, onChange]\n  );\n\n  const setRef = (inputRef: any, ref: any) => {\n    if (typeof ref === 'object') {\n      ref.current = inputRef;\n    }\n  };\n\n  const InputComponent: any = maskProps ? TextInputMask : TextInput;\n  const customProps = maskProps\n    ? { refInput: (ref: any) => setRef(ref, refInput) }\n    : { ref: refInput };\n\n  return (\n    <InputComponent\n      style={style}\n      onChangeText={handleChange}\n      hitSlop={{ top: 10, bottom: 10, left: 0, right: 0 }}\n      {...maskProps}\n      {...props}\n      {...customProps}\n    />\n  );\n};\n\nexport default CardInput;\n"]}