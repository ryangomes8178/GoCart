{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport * as yup from 'yup';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport cardValidator from 'card-validator';\nimport * as Animatable from 'react-native-animatable';\nimport CardSide, { CardSideEnum } from \"./CardSide\";\nimport CardInput from \"./CardInput\";\nvar validationSchema = yup.object().shape({\n  holder: yup.string().defined().test('is-valid-holder', 'Holder name is invalid', function (holderName) {\n    var _this$options$context = this.options.context.runtime,\n        runtime = _this$options$context === void 0 ? false : _this$options$context;\n\n    var _cardValidator$cardho = cardValidator.cardholderName(holderName),\n        isPotentiallyValid = _cardValidator$cardho.isPotentiallyValid,\n        isValid = _cardValidator$cardho.isValid;\n\n    return runtime ? isPotentiallyValid : isValid;\n  }),\n  number: yup.string().defined().test('is-valid-card-number', 'Card number is invalid', function (cardNumber) {\n    var _this$options$context2 = this.options.context.runtime,\n        runtime = _this$options$context2 === void 0 ? false : _this$options$context2;\n\n    var _cardValidator$number = cardValidator.number(cardNumber),\n        isPotentiallyValid = _cardValidator$number.isPotentiallyValid,\n        isValid = _cardValidator$number.isValid;\n\n    return runtime ? isPotentiallyValid : isValid;\n  }),\n  expiration: yup.string().defined().test('is-valid-expiration', 'Card expiration is invalid', function (expiration) {\n    var _this$options$context3 = this.options.context.runtime,\n        runtime = _this$options$context3 === void 0 ? false : _this$options$context3;\n\n    var _cardValidator$expira = cardValidator.expirationDate(expiration),\n        isPotentiallyValid = _cardValidator$expira.isPotentiallyValid,\n        isValid = _cardValidator$expira.isValid;\n\n    return runtime ? isPotentiallyValid : isValid;\n  }),\n  cvv: yup.string().defined().test('is-valid-cvv', 'Card CVV is invalid', function (cvv) {\n    var _this$options$context4 = this.options.context.runtime,\n        runtime = _this$options$context4 === void 0 ? false : _this$options$context4;\n\n    var _cardValidator$cvv = cardValidator.cvv(cvv),\n        isPotentiallyValid = _cardValidator$cvv.isPotentiallyValid,\n        isValid = _cardValidator$cvv.isValid;\n\n    return runtime ? isPotentiallyValid : isValid;\n  })\n});\nvar Images = {\n  chip: require(\"./images/chip.png\"),\n  brands: {\n    default: '',\n    visa: require(\"./images/brands/visa.png\")\n  },\n  icons: {\n    rotate: require(\"./images/icons/rotate.png\")\n  }\n};\nvar defaultCardConfig = {\n  numberMask: '9999 9999 9999 9999',\n  cvvMask: '999',\n  brandImage: Images.brands.default,\n  brandName: ''\n};\nvar CreditCard = React.forwardRef(function (_ref, ref) {\n  var placeholders = _ref.placeholders,\n      labels = _ref.labels,\n      background = _ref.background,\n      textColor = _ref.textColor,\n      errorTextColor = _ref.errorTextColor,\n      placeholderTextColor = _ref.placeholderTextColor,\n      initialValues = _ref.initialValues,\n      expirationDateFormat = _ref.expirationDateFormat,\n      onValidStateChange = _ref.onValidStateChange;\n\n  var _React$useState = React.useState(initialValues),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cardData = _React$useState2[0],\n      setCardData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(CardSideEnum.FRONT),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeSide = _React$useState4[0],\n      setActiveSide = _React$useState4[1];\n\n  var _React$useState5 = React.useState(defaultCardConfig),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      cardConfig = _React$useState6[0],\n      setCardConfig = _React$useState6[1];\n\n  var _React$useState7 = React.useState({\n    number: false,\n    holder: false,\n    expiration: false,\n    cvv: false\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      errors = _React$useState8[0],\n      setErrors = _React$useState8[1];\n\n  var frontOpacityRef = React.useRef(new Animated.Value(1)).current;\n  var backOpacityRef = React.useRef(new Animated.Value(0)).current;\n  var rotationValue = React.useRef(new Animated.Value(0)).current;\n  var numberInputRef = React.useRef(null);\n  var holderInputRef = React.useRef(null);\n  var expirationInputRef = React.useRef(null);\n  var cvvInputRef = React.useRef(null);\n  var cardDataIsValid = React.useRef(false);\n  var textStyle = {\n    color: textColor\n  };\n  var rotate = React.useCallback(function () {\n    var fadeAnimationConfig = function fadeAnimationConfig(appearing) {\n      return {\n        toValue: appearing ? 1 : 0,\n        duration: 200,\n        useNativeDriver: true\n      };\n    };\n\n    var rotateAnimationConfig = function rotateAnimationConfig(isAppearing) {\n      return {\n        toValue: isAppearing ? 1 : 0,\n        duration: 400,\n        useNativeDriver: true\n      };\n    };\n\n    var isFrontActive = activeSide === CardSideEnum.FRONT;\n    Animated.parallel([Animated.timing(frontOpacityRef, fadeAnimationConfig(!isFrontActive)), Animated.timing(backOpacityRef, fadeAnimationConfig(isFrontActive)), Animated.timing(rotationValue, rotateAnimationConfig(isFrontActive))]).start(function () {\n      var newActiveSide = isFrontActive ? CardSideEnum.BACK : CardSideEnum.FRONT;\n      setActiveSide(newActiveSide);\n    });\n  }, [activeSide, backOpacityRef, frontOpacityRef, rotationValue]);\n  var expirationMask = expirationDateFormat === 'MM/YY' ? '99/99' : '99/9999';\n  var validateField = React.useCallback(function (name, value) {\n    var values = _defineProperty({}, name, value);\n\n    var response = {\n      isPontentiallyValid: false,\n      isValid: false,\n      error: null\n    };\n\n    try {\n      validationSchema.validateSyncAt(name, values, {\n        context: {\n          runtime: true\n        }\n      });\n      response.isPontentiallyValid = true;\n      validationSchema.validateSyncAt(name, values, {\n        context: {\n          runtime: false\n        }\n      });\n      response.isValid = true;\n    } catch (validationError) {\n      setErrors(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, name, response.isPontentiallyValid ? false : validationError));\n      });\n    }\n\n    return response;\n  }, []);\n\n  var loadCardConfig = function loadCardConfig(cardNumber) {\n    var _cardValidator$number2 = cardValidator.number(cardNumber),\n        _cardValidator$number3 = _cardValidator$number2.card,\n        card = _cardValidator$number3 === void 0 ? null : _cardValidator$number3;\n\n    if (!card) {\n      setCardConfig(_objectSpread({}, defaultCardConfig));\n      return;\n    }\n\n    var _card$type = card.type,\n        type = _card$type === void 0 ? '' : _card$type,\n        _card$code = card.code,\n        code = _card$code === void 0 ? {\n      size: 0\n    } : _card$code,\n        _card$gaps = card.gaps,\n        gaps = _card$gaps === void 0 ? [] : _card$gaps,\n        _card$lengths = card.lengths,\n        lengths = _card$lengths === void 0 ? [] : _card$lengths,\n        _card$niceType = card.niceType,\n        niceType = _card$niceType === void 0 ? '' : _card$niceType;\n    setCardData(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        brand: type\n      });\n    });\n    setCardConfig(function (prev) {\n      var maxLength = Math.max.apply(Math, _toConsumableArray(lengths));\n      var maskChars = ''.padStart(maxLength, '9').split('');\n\n      for (var i = 0; i < gaps.length; i += 1) {\n        maskChars.splice(gaps[i] + i, 0, ' ');\n      }\n\n      var numberMask = maskChars.join('');\n      var cvvMask = ''.padStart(code.size, '9');\n      var brandImage = Images.brands[type] ? Images.brands[type] : Images.brands.default;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        numberMask: numberMask,\n        cvvMask: cvvMask,\n        brandImage: brandImage,\n        brandName: niceType\n      });\n    });\n  };\n\n  var handleInputChange = React.useCallback(function (name, text) {\n    setCardData(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, name, text));\n    });\n\n    var _validateField = validateField(name, text),\n        isValid = _validateField.isValid;\n\n    if (name === 'number') {\n      loadCardConfig(text);\n\n      if (isValid) {\n        focusField(holderInputRef);\n      }\n    } else if (name === 'expiration' && isValid && text.length === expirationMask.length) {\n      focusField(cvvInputRef);\n      rotate();\n    }\n  }, [validateField, rotate, expirationMask]);\n  var getSideStyle = React.useCallback(function (side) {\n    var outputRange = side === CardSideEnum.FRONT ? [1, -1] : [-1, 1];\n    return {\n      transform: [{\n        scaleX: rotationValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: outputRange\n        })\n      }],\n      opacity: side === CardSideEnum.FRONT ? frontOpacityRef : backOpacityRef,\n      zIndex: side === activeSide ? 1 : 0\n    };\n  }, [activeSide, backOpacityRef, frontOpacityRef, rotationValue]);\n\n  var focusField = function focusField(field) {\n    if (!field || !field.current) return;\n    field.current.focus();\n  };\n\n  var submit = React.useCallback(function () {\n    var response = {\n      error: null,\n      data: cardData\n    };\n\n    try {\n      validationSchema.validateSync(cardData, {\n        context: {\n          runtime: false\n        },\n        abortEarly: false\n      });\n    } catch (err) {\n      response.error = err;\n    }\n\n    return response;\n  }, [cardData]);\n  React.useEffect(function () {\n    if (cardDataIsValid.current !== undefined) {\n      try {\n        validationSchema.validateSync(cardData, {\n          context: {\n            runtime: false\n          }\n        });\n        onValidStateChange(true);\n      } catch (validationErrors) {\n        onValidStateChange(false, validationErrors);\n      }\n    }\n  }, [cardData, onValidStateChange]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      submit: submit\n    };\n  });\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss\n  }, React.createElement(View, {\n    style: styles.cardWrapper\n  }, React.createElement(CardSide, {\n    background: background,\n    style: [[getSideStyle(CardSideEnum.FRONT)]]\n  }, React.createElement(View, {\n    style: styles.header\n  }, React.createElement(TouchableOpacity, {\n    onPress: rotate\n  }, React.createElement(Image, {\n    source: Images.icons.rotate\n  })), !!cardConfig.brandImage && React.createElement(Animatable.Image, {\n    source: cardConfig.brandImage,\n    animation: \"slideInRight\",\n    duration: 400,\n    useNativeDriver: true\n  }), !!(!cardConfig.brandImage && cardConfig.brandName) && React.createElement(Animatable.Text, {\n    style: [styles.textData, textStyle],\n    animation: \"slideInRight\",\n    duration: 400\n  }, cardConfig.brandName)), React.createElement(Image, {\n    source: Images.chip,\n    style: styles.imageChip\n  }), React.createElement(View, null, React.createElement(CardInput, {\n    placeholderTextColor: placeholderTextColor,\n    name: \"number\",\n    onChange: handleInputChange,\n    value: cardData === null || cardData === void 0 ? void 0 : cardData.number,\n    autoFocus: true,\n    placeholder: placeholders.number,\n    style: [styles.textCardNumber, {\n      color: errors.number ? errorTextColor : textColor\n    }],\n    maxLength: cardConfig.numberMask.length,\n    autocompleteType: \"cc-number\",\n    textContentType: \"creditCardNumber\",\n    maskProps: {\n      type: 'custom',\n      options: {\n        mask: cardConfig.numberMask\n      }\n    },\n    refInput: numberInputRef,\n    returnKeyType: \"next\",\n    autoCorrect: false,\n    onSubmitEditing: function onSubmitEditing() {\n      return focusField(holderInputRef);\n    },\n    blurOnSubmit: false\n  })), React.createElement(View, {\n    style: styles.footer\n  }, React.createElement(View, {\n    style: styles.holderWrapper\n  }, React.createElement(Text, {\n    style: [styles.textLabel, textStyle]\n  }, labels.holder), React.createElement(CardInput, {\n    placeholderTextColor: placeholderTextColor,\n    name: \"holder\",\n    autocompleteType: \"name\",\n    textContentType: \"name\",\n    returnKeyType: \"next\",\n    onChange: handleInputChange,\n    placeholder: placeholders.holder,\n    autoCapitalize: \"characters\",\n    style: [styles.textData, {\n      color: errors.holder ? errorTextColor : textColor\n    }],\n    value: cardData === null || cardData === void 0 ? void 0 : cardData.holder,\n    refInput: holderInputRef,\n    onSubmitEditing: function onSubmitEditing() {\n      return focusField(expirationInputRef);\n    },\n    blurOnSubmit: false\n  })), React.createElement(View, {\n    style: styles.expirationWrapper\n  }, React.createElement(Text, {\n    style: [styles.textLabel, textStyle]\n  }, labels.expiration), React.createElement(CardInput, {\n    placeholderTextColor: placeholderTextColor,\n    name: \"expiration\",\n    autocompleteType: \"cc-exp\",\n    keyboardType: \"numbers-and-punctuation\",\n    returnKeyType: \"next\",\n    onChange: handleInputChange,\n    placeholder: placeholders.expiration,\n    style: [styles.textData, {\n      color: errors.expiration && cardData.expiration.length === expirationMask.length ? errorTextColor : textColor\n    }],\n    value: cardData === null || cardData === void 0 ? void 0 : cardData.expiration,\n    maxLength: 7,\n    maskProps: {\n      type: 'custom',\n      options: {\n        mask: expirationMask\n      }\n    },\n    refInput: expirationInputRef,\n    onSubmitEditing: function onSubmitEditing() {\n      focusField(cvvInputRef);\n      rotate();\n    },\n    blurOnSubmit: false\n  })))), React.createElement(CardSide, {\n    style: [getSideStyle(CardSideEnum.BACK)],\n    background: background\n  }, React.createElement(View, {\n    style: styles.strip\n  }), React.createElement(TouchableOpacity, {\n    onPress: rotate\n  }, React.createElement(Image, {\n    source: Images.icons.rotate\n  })), React.createElement(View, {\n    style: styles.cvvWrapper,\n    pointerEvents: \"box-none\"\n  }, React.createElement(Text, {\n    style: [styles.textLabel, textStyle]\n  }, labels.cvv), React.createElement(CardInput, {\n    placeholderTextColor: placeholderTextColor,\n    name: \"cvv\",\n    autocompleteType: \"cc-csc\",\n    keyboardType: \"numeric\",\n    returnKeyType: \"done\",\n    onChange: handleInputChange,\n    placeholder: placeholders.cvv,\n    style: [styles.textData, {\n      color: errors.cvv ? errorTextColor : textColor\n    }],\n    value: cardData === null || cardData === void 0 ? void 0 : cardData.cvv,\n    maxLength: cardConfig.cvvMask.length,\n    maskProps: {\n      type: 'custom',\n      options: {\n        mask: cardConfig.cvvMask\n      }\n    },\n    onBlur: rotate,\n    refInput: cvvInputRef\n  })))));\n});\nCreditCard.defaultProps = {\n  placeholders: {\n    number: '0000 0000 0000 0000',\n    holder: 'TITULAR DO CARTÃO',\n    expiration: 'MM/YYYY',\n    cvv: '000'\n  },\n  labels: {\n    holder: 'TITULAR DO CARTÃO',\n    expiration: 'VENCIMENTO',\n    cvv: 'CÓD. SEGURANÇA'\n  },\n  expirationDateFormat: 'MM/YYYY',\n  textColor: '#FFFFFF',\n  placeholderTextColor: '#9B84A9',\n  initialValues: {\n    number: '',\n    holder: '',\n    expiration: '',\n    cvv: '',\n    brand: ''\n  },\n  errorTextColor: '#F15A5B',\n  onValidStateChange: function onValidStateChange() {}\n};\nvar styles = StyleSheet.create({\n  cardWrapper: {\n    height: '100%',\n    maxHeight: 220,\n    position: 'relative',\n    width: '100%',\n    maxWidth: 350,\n    shadowColor: 'rgba(0,0,0,0.6)',\n    shadowOffset: {\n      width: 0,\n      height: 6\n    },\n    shadowOpacity: 0.37,\n    shadowRadius: 7.49,\n    borderRadius: 6,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  background: {\n    resizeMode: 'cover',\n    width: '100%',\n    height: '100%'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8\n  },\n  textLabel: {\n    fontSize: 10 / PixelRatio.getFontScale(),\n    textTransform: 'uppercase'\n  },\n  textData: {\n    fontWeight: 'bold',\n    fontSize: 16 / PixelRatio.getFontScale()\n  },\n  textCardNumber: {\n    fontSize: 20 / PixelRatio.getFontScale(),\n    fontWeight: 'bold',\n    marginBottom: 8,\n    marginTop: 16,\n    letterSpacing: 2\n  },\n  imageChip: {\n    marginTop: 16\n  },\n  footer: {\n    marginTop: 16,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  strip: {\n    backgroundColor: 'rgba(0,0,0,.6)',\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    marginTop: 48,\n    height: 40\n  },\n  cvvWrapper: {\n    height: '100%',\n    alignItems: 'flex-end',\n    justifyContent: 'flex-end',\n    bottom: 24\n  },\n  holderWrapper: {\n    flex: 2,\n    marginRight: 16\n  },\n  expirationWrapper: {\n    flex: 1,\n    alignItems: 'flex-end'\n  }\n});\nexport default CreditCard;","map":{"version":3,"sources":["CreditCard.tsx"],"names":["validationSchema","holder","runtime","isValid","cardValidator","number","expiration","cvv","Images","chip","require","brands","default","visa","icons","rotate","defaultCardConfig","numberMask","cvvMask","brandImage","brandName","CreditCard","onValidStateChange","React","CardSideEnum","frontOpacityRef","Animated","backOpacityRef","rotationValue","numberInputRef","holderInputRef","expirationInputRef","cvvInputRef","cardDataIsValid","textStyle","color","textColor","fadeAnimationConfig","appearing","toValue","duration","useNativeDriver","rotateAnimationConfig","isAppearing","isFrontActive","activeSide","newActiveSide","setActiveSide","expirationMask","expirationDateFormat","validateField","values","value","response","isPontentiallyValid","error","context","setErrors","prev","validationError","loadCardConfig","cardNumber","card","setCardConfig","type","code","size","gaps","lengths","niceType","setCardData","brand","maxLength","Math","maskChars","i","handleInputChange","text","name","focusField","getSideStyle","side","outputRange","transform","scaleX","inputRange","opacity","zIndex","field","submit","data","cardData","abortEarly","Keyboard","dismiss","styles","cardWrapper","header","cardConfig","imageChip","placeholders","errors","options","mask","footer","holderWrapper","labels","expirationWrapper","background","strip","placeholderTextColor","initialValues","errorTextColor","height","maxHeight","position","width","maxWidth","shadowColor","shadowOffset","shadowOpacity","shadowRadius","borderRadius","justifyContent","alignItems","resizeMode","flexDirection","marginBottom","textLabel","fontSize","PixelRatio","textTransform","textData","fontWeight","textCardNumber","marginTop","letterSpacing","backgroundColor","left","right","cvvWrapper","bottom","flex","marginRight"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable global-require */\nimport * as React from 'react';\nimport * as yup from 'yup';\n\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Image,\n  Animated,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  Keyboard,\n  PixelRatio,\n} from 'react-native';\n\n// import CreditCardType from 'credit-card-type';\nimport cardValidator from 'card-validator';\nimport * as Animatable from 'react-native-animatable';\n\nimport CardSide, { CardSideEnum } from './CardSide';\nimport CardInput from './CardInput';\n\nconst validationSchema = yup.object().shape({\n  holder: yup\n    .string()\n    .defined()\n    .test('is-valid-holder', 'Holder name is invalid', function (\n      holderName: any\n    ) {\n      const { runtime = false } = this.options.context as any;\n      const { isPotentiallyValid, isValid } = cardValidator.cardholderName(\n        holderName\n      );\n      return runtime ? isPotentiallyValid : isValid;\n    }),\n  number: yup\n    .string()\n    .defined()\n    .test('is-valid-card-number', 'Card number is invalid', function (\n      cardNumber: any\n    ) {\n      const { runtime = false } = this.options.context as any;\n      const { isPotentiallyValid, isValid } = cardValidator.number(cardNumber);\n      return runtime ? isPotentiallyValid : isValid;\n    }),\n  expiration: yup\n    .string()\n    .defined()\n    .test('is-valid-expiration', 'Card expiration is invalid', function (\n      expiration: any\n    ) {\n      const { runtime = false } = this.options.context as any;\n      const { isPotentiallyValid, isValid } = cardValidator.expirationDate(\n        expiration\n      );\n      return runtime ? isPotentiallyValid : isValid;\n    }),\n  cvv: yup\n    .string()\n    .defined()\n    .test('is-valid-cvv', 'Card CVV is invalid', function (cvv: any) {\n      const { runtime = false } = this.options.context as any;\n      const { isPotentiallyValid, isValid } = cardValidator.cvv(cvv);\n      return runtime ? isPotentiallyValid : isValid;\n    }),\n});\n\nconst Images: any = {\n  chip: require('./images/chip.png'),\n  brands: {\n    default: '',\n    visa: require('./images/brands/visa.png'),\n  },\n  icons: {\n    rotate: require('./images/icons/rotate.png'),\n  },\n};\n\nexport type CreditCardType = {\n  submit: () => void;\n};\n\ninterface CardData {\n  number?: string;\n  holder?: string;\n  expiration?: string;\n  cvv?: string;\n  brand?: string;\n}\n\ninterface CreditCardProps {\n  placeholders?: {\n    number?: string;\n    holder?: string;\n    expiration?: string;\n    cvv?: string;\n  };\n  labels?: {\n    holder?: string;\n    expiration?: string;\n    cvv?: string;\n  };\n  expirationDateFormat?: 'MM/YYYY' | 'MM/YY';\n  initialValues?: CardData;\n  background?: string | any;\n  textColor?: string;\n  placeholderTextColor?: string;\n  errorTextColor?: string;\n  onValidStateChange?: (cardDataIsValid: boolean) => void;\n}\n\nexport interface SubmitResponse {\n  error: yup.ValidationError | null;\n  data: CardData;\n}\n\nconst defaultCardConfig = {\n  numberMask: '9999 9999 9999 9999',\n  cvvMask: '999',\n  brandImage: Images.brands.default,\n  brandName: '',\n};\n\nconst CreditCard = React.forwardRef<CreditCardType, CreditCardProps>(\n  (\n    {\n      placeholders,\n      labels,\n      background,\n      textColor,\n      errorTextColor,\n      placeholderTextColor,\n      initialValues,\n      expirationDateFormat,\n      onValidStateChange,\n    }: any,\n    ref\n  ) => {\n    /** States */\n    const [cardData, setCardData] = React.useState(initialValues);\n    const [activeSide, setActiveSide] = React.useState(CardSideEnum.FRONT);\n    const [cardConfig, setCardConfig] = React.useState(defaultCardConfig);\n    const [errors, setErrors] = React.useState({\n      number: false,\n      holder: false,\n      expiration: false,\n      cvv: false,\n    });\n\n    /** Animations Refs */\n    const frontOpacityRef = React.useRef(new Animated.Value(1)).current;\n    const backOpacityRef = React.useRef(new Animated.Value(0)).current;\n    const rotationValue = React.useRef(new Animated.Value(0)).current;\n\n    /** Input Refs */\n    const numberInputRef = React.useRef(null);\n    const holderInputRef = React.useRef(null);\n    const expirationInputRef = React.useRef(null);\n    const cvvInputRef = React.useRef(null);\n\n    /** Other refs */\n    const cardDataIsValid = React.useRef(false);\n\n    /** Runtime Styles */\n    const textStyle = { color: textColor };\n\n    /** Animate Card (Rotate) */\n    const rotate = React.useCallback(() => {\n      const fadeAnimationConfig = (appearing: boolean) => ({\n        toValue: appearing ? 1 : 0,\n        duration: 200,\n        useNativeDriver: true,\n      });\n\n      const rotateAnimationConfig = (isAppearing: boolean) => ({\n        toValue: isAppearing ? 1 : 0,\n        duration: 400,\n        useNativeDriver: true,\n      });\n\n      const isFrontActive = activeSide === CardSideEnum.FRONT;\n      Animated.parallel([\n        Animated.timing(frontOpacityRef, fadeAnimationConfig(!isFrontActive)),\n        Animated.timing(backOpacityRef, fadeAnimationConfig(isFrontActive)),\n        Animated.timing(rotationValue, rotateAnimationConfig(isFrontActive)),\n      ]).start(() => {\n        const newActiveSide = isFrontActive\n          ? CardSideEnum.BACK\n          : CardSideEnum.FRONT;\n        setActiveSide(newActiveSide);\n      });\n    }, [activeSide, backOpacityRef, frontOpacityRef, rotationValue]);\n\n    const expirationMask =\n      expirationDateFormat === 'MM/YY' ? '99/99' : '99/9999';\n\n    const validateField = React.useCallback((name: string, value: any) => {\n      const values: any = { [name]: value };\n      const response = {\n        isPontentiallyValid: false,\n        isValid: false,\n        error: null,\n      };\n\n      try {\n        // Check potentially invalid... If has error, it is throwed...\n        validationSchema.validateSyncAt(name, values, {\n          context: { runtime: true },\n        });\n        response.isPontentiallyValid = true;\n\n        // Check if is valid... If has error, it is throwed...\n        validationSchema.validateSyncAt(name, values, {\n          context: { runtime: false },\n        });\n        response.isValid = true;\n      } catch (validationError) {\n        setErrors((prev) => ({\n          ...prev,\n          [name]: response.isPontentiallyValid ? false : validationError,\n        }));\n      }\n\n      return response;\n    }, []);\n\n    const loadCardConfig = (cardNumber: string) => {\n      const { card = null } = cardValidator.number(cardNumber);\n      if (!card) {\n        setCardConfig({ ...defaultCardConfig });\n        return;\n      }\n\n      const {\n        type = '',\n        code = { size: 0 },\n        gaps = [],\n        lengths = [],\n        niceType = '',\n      } = card;\n\n      setCardData((prev: any) => ({\n        ...prev,\n        brand: type,\n      }));\n\n      setCardConfig((prev: any) => {\n        const maxLength = Math.max(...lengths);\n        const maskChars = ''.padStart(maxLength, '9').split('');\n        for (let i = 0; i < gaps.length; i += 1) {\n          maskChars.splice(gaps[i] + i, 0, ' ');\n        }\n        const numberMask = maskChars.join('');\n\n        const cvvMask = ''.padStart(code.size, '9');\n        const brandImage = Images.brands[type]\n          ? Images.brands[type]\n          : Images.brands.default;\n\n        return {\n          ...prev,\n          numberMask,\n          cvvMask,\n          brandImage,\n          brandName: niceType,\n        };\n      });\n    };\n\n    const handleInputChange = React.useCallback(\n      (name, text) => {\n        setCardData((prev: any) => ({ ...prev, [name]: text }));\n        const { isValid } = validateField(name, text);\n\n        if (name === 'number') {\n          loadCardConfig(text);\n          if (isValid) {\n            focusField(holderInputRef);\n          }\n        } else if (\n          name === 'expiration' &&\n          isValid &&\n          text.length === expirationMask.length\n        ) {\n          focusField(cvvInputRef);\n          rotate();\n        }\n      },\n      [validateField, rotate, expirationMask]\n    );\n\n    const getSideStyle = React.useCallback(\n      (side) => {\n        const outputRange = side === CardSideEnum.FRONT ? [1, -1] : [-1, 1];\n\n        return {\n          transform: [\n            {\n              scaleX: rotationValue.interpolate({\n                inputRange: [0, 1],\n                outputRange,\n              }),\n            },\n          ],\n          opacity:\n            side === CardSideEnum.FRONT ? frontOpacityRef : backOpacityRef,\n          zIndex: side === activeSide ? 1 : 0,\n        };\n      },\n      [activeSide, backOpacityRef, frontOpacityRef, rotationValue]\n    );\n\n    const focusField = (field: any) => {\n      if (!field || !field.current) return;\n      field.current.focus();\n    };\n\n    const submit = React.useCallback(() => {\n      const response: SubmitResponse = {\n        error: null,\n        data: cardData,\n      };\n      try {\n        validationSchema.validateSync(cardData, {\n          context: { runtime: false },\n          abortEarly: false,\n        });\n      } catch (err) {\n        response.error = err;\n      }\n      return response;\n    }, [cardData]);\n\n    React.useEffect(() => {\n      if (cardDataIsValid.current !== undefined) {\n        try {\n          validationSchema.validateSync(cardData, {\n            context: { runtime: false },\n          });\n          onValidStateChange(true);\n        } catch (validationErrors) {\n          onValidStateChange(false, validationErrors);\n        }\n      }\n    }, [cardData, onValidStateChange]);\n\n    React.useImperativeHandle(ref, () => ({ submit }));\n\n    return (\n      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\n        <View style={styles.cardWrapper}>\n          <CardSide\n            background={background}\n            style={[[getSideStyle(CardSideEnum.FRONT)]]}\n          >\n            <View style={styles.header}>\n              <TouchableOpacity onPress={rotate}>\n                <Image source={Images.icons.rotate} />\n              </TouchableOpacity>\n\n              {!!cardConfig.brandImage && (\n                <Animatable.Image\n                  source={cardConfig.brandImage}\n                  animation=\"slideInRight\"\n                  duration={400}\n                  useNativeDriver\n                />\n              )}\n              {!!(!cardConfig.brandImage && cardConfig.brandName) && (\n                <Animatable.Text\n                  style={[styles.textData, textStyle]}\n                  animation=\"slideInRight\"\n                  duration={400}\n                >\n                  {cardConfig.brandName}\n                </Animatable.Text>\n              )}\n            </View>\n\n            <Image source={Images.chip} style={styles.imageChip} />\n\n            <View>\n              <CardInput\n                placeholderTextColor={placeholderTextColor}\n                name=\"number\"\n                onChange={handleInputChange}\n                value={cardData?.number}\n                autoFocus\n                placeholder={placeholders.number}\n                style={[\n                  styles.textCardNumber,\n                  { color: errors.number ? errorTextColor : textColor },\n                ]}\n                maxLength={cardConfig.numberMask.length}\n                autocompleteType=\"cc-number\"\n                textContentType=\"creditCardNumber\"\n                maskProps={{\n                  type: 'custom',\n                  options: { mask: cardConfig.numberMask },\n                }}\n                refInput={numberInputRef}\n                returnKeyType=\"next\"\n                autoCorrect={false}\n                onSubmitEditing={() => focusField(holderInputRef)}\n                blurOnSubmit={false}\n              />\n            </View>\n\n            <View style={styles.footer}>\n              <View style={styles.holderWrapper}>\n                <Text style={[styles.textLabel, textStyle]}>\n                  {labels.holder}\n                </Text>\n                <CardInput\n                  placeholderTextColor={placeholderTextColor}\n                  name=\"holder\"\n                  autocompleteType=\"name\"\n                  textContentType=\"name\"\n                  returnKeyType=\"next\"\n                  onChange={handleInputChange}\n                  placeholder={placeholders.holder}\n                  autoCapitalize=\"characters\"\n                  style={[\n                    styles.textData,\n                    { color: errors.holder ? errorTextColor : textColor },\n                  ]}\n                  value={cardData?.holder}\n                  refInput={holderInputRef}\n                  onSubmitEditing={() => focusField(expirationInputRef)}\n                  blurOnSubmit={false}\n                />\n              </View>\n              <View style={styles.expirationWrapper}>\n                <Text style={[styles.textLabel, textStyle]}>\n                  {labels.expiration}\n                </Text>\n                <CardInput\n                  placeholderTextColor={placeholderTextColor}\n                  name=\"expiration\"\n                  autocompleteType=\"cc-exp\"\n                  keyboardType=\"numbers-and-punctuation\"\n                  returnKeyType=\"next\"\n                  onChange={handleInputChange}\n                  placeholder={placeholders.expiration}\n                  style={[\n                    styles.textData,\n                    {\n                      color:\n                        errors.expiration &&\n                        cardData.expiration.length === expirationMask.length\n                          ? errorTextColor\n                          : textColor,\n                    },\n                  ]}\n                  value={cardData?.expiration}\n                  maxLength={7}\n                  maskProps={{\n                    type: 'custom',\n                    options: { mask: expirationMask },\n                  }}\n                  refInput={expirationInputRef}\n                  onSubmitEditing={() => {\n                    focusField(cvvInputRef);\n                    rotate();\n                  }}\n                  blurOnSubmit={false}\n                />\n              </View>\n            </View>\n          </CardSide>\n\n          <CardSide\n            style={[getSideStyle(CardSideEnum.BACK)]}\n            background={background}\n          >\n            <View style={styles.strip} />\n            <TouchableOpacity onPress={rotate}>\n              <Image source={Images.icons.rotate} />\n            </TouchableOpacity>\n            <View style={styles.cvvWrapper} pointerEvents=\"box-none\">\n              <Text style={[styles.textLabel, textStyle]}>{labels.cvv}</Text>\n              <CardInput\n                placeholderTextColor={placeholderTextColor}\n                name=\"cvv\"\n                autocompleteType=\"cc-csc\"\n                keyboardType=\"numeric\"\n                returnKeyType=\"done\"\n                onChange={handleInputChange}\n                placeholder={placeholders.cvv}\n                style={[\n                  styles.textData,\n                  { color: errors.cvv ? errorTextColor : textColor },\n                ]}\n                value={cardData?.cvv}\n                maxLength={cardConfig.cvvMask.length}\n                maskProps={{\n                  type: 'custom',\n                  options: { mask: cardConfig.cvvMask },\n                }}\n                onBlur={rotate}\n                refInput={cvvInputRef}\n              />\n            </View>\n          </CardSide>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n);\n\nCreditCard.defaultProps = {\n  placeholders: {\n    number: '0000 0000 0000 0000',\n    holder: 'TITULAR DO CARTÃO',\n    expiration: 'MM/YYYY',\n    cvv: '000',\n  },\n  labels: {\n    holder: 'TITULAR DO CARTÃO',\n    expiration: 'VENCIMENTO',\n    cvv: 'CÓD. SEGURANÇA',\n  },\n  expirationDateFormat: 'MM/YYYY',\n  textColor: '#FFFFFF',\n  placeholderTextColor: '#9B84A9',\n  initialValues: {\n    number: '',\n    holder: '',\n    expiration: '',\n    cvv: '',\n    brand: '',\n  },\n  errorTextColor: '#F15A5B',\n  onValidStateChange: () => {},\n};\n\nconst styles = StyleSheet.create({\n  cardWrapper: {\n    height: '100%',\n    maxHeight: 220,\n    position: 'relative',\n    width: '100%',\n    maxWidth: 350,\n    shadowColor: 'rgba(0,0,0,0.6)',\n    shadowOffset: {\n      width: 0,\n      height: 6,\n    },\n    shadowOpacity: 0.37,\n    shadowRadius: 7.49,\n    borderRadius: 6,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  background: {\n    resizeMode: 'cover',\n    width: '100%',\n    height: '100%',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  textLabel: {\n    fontSize: 10 / PixelRatio.getFontScale(),\n    textTransform: 'uppercase',\n  },\n  textData: {\n    fontWeight: 'bold',\n    fontSize: 16 / PixelRatio.getFontScale(),\n  },\n  textCardNumber: {\n    fontSize: 20 / PixelRatio.getFontScale(),\n    fontWeight: 'bold',\n    marginBottom: 8,\n    marginTop: 16,\n    letterSpacing: 2,\n  },\n  imageChip: {\n    marginTop: 16,\n  },\n  footer: {\n    marginTop: 16,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  strip: {\n    backgroundColor: 'rgba(0,0,0,.6)',\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    marginTop: 48,\n    height: 40,\n  },\n  cvvWrapper: {\n    height: '100%',\n    alignItems: 'flex-end',\n    justifyContent: 'flex-end',\n    bottom: 24,\n  },\n  holderWrapper: {\n    flex: 2,\n    marginRight: 16,\n  },\n  expirationWrapper: {\n    flex: 1,\n    alignItems: 'flex-end',\n  },\n});\n\nexport default CreditCard;\n"]},"metadata":{},"sourceType":"module"}