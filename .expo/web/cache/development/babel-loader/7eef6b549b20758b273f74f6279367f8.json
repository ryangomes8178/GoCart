{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/raj/Desktop/skrt/node_modules/react-native-input-spinner/src/InputSpinner.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport { defaultColor, defaultTransparent, defaultFont, Style } from \"./Style\";\nimport { colorsToHex, debounce, getColorContrast, isCallable, isEmpty, isNumeric, isTransparentColor, mergeViewStyle, parseColor } from \"./Utils\";\nexport var defaultSpeed = 7;\nexport var defaultAccelerationDelay = 1000;\nexport var defaultTypingTime = 500;\n\nvar InputSpinner = function (_Component) {\n  _inherits(InputSpinner, _Component);\n\n  var _super = _createSuper(InputSpinner);\n\n  function InputSpinner(props) {\n    var _this;\n\n    _classCallCheck(this, InputSpinner);\n\n    _this = _super.call(this, props);\n    _this.increaseTimer = null;\n    _this.decreaseTimer = null;\n    _this.holdTime = null;\n\n    var spinnerStep = _this._parseNum(_this.props.step);\n\n    if (!_this.isTypeDecimal() && spinnerStep < 1) {\n      spinnerStep = 1;\n    }\n\n    var spinnerLongStep = _this._parseNum(_this.props.longStep);\n\n    if (!_this.isTypeDecimal() && spinnerLongStep < 1) {\n      spinnerLongStep = 0;\n    }\n\n    var min = _this.props.min != null ? _this._parseNum(_this.props.min) : null;\n    var max = _this.props.max != null ? _this._parseNum(_this.props.max) : null;\n    var initialValue = _this.props.initialValue != null && !isNaN(12) ? _this.props.initialValue : _this.props.value;\n    initialValue = _this._parseNum(initialValue);\n    initialValue = _this._withinRange(initialValue, min, max);\n    _this._debounceSetMax = debounce(_this._setStateMax.bind(_assertThisInitialized(_this)), _this.props.typingTime);\n    _this._debounceSetMin = debounce(_this._setStateMin.bind(_assertThisInitialized(_this)), _this.props.typingTime);\n    _this._updateValue = debounce(function (value) {\n      _this.setState({\n        value: value\n      });\n    }, 250);\n    _this.state = {\n      min: min,\n      max: max,\n      value: initialValue,\n      step: spinnerStep,\n      longStep: spinnerLongStep,\n      focused: false,\n      buttonPress: null\n    };\n    return _this;\n  }\n\n  _createClass(InputSpinner, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.value !== prevProps.value) {\n        var newValue = this._parseNum(this.props.value);\n\n        newValue = this._withinRange(newValue);\n\n        this._updateValue(newValue);\n      }\n\n      if (this.props.min !== prevProps.min) {\n        this.setState({\n          min: this.props.min != null ? this._parseNum(this.props.min) : null\n        });\n      }\n\n      if (this.props.max !== prevProps.max) {\n        this.setState({\n          max: this.props.max != null ? this._parseNum(this.props.max) : null\n        });\n      }\n\n      if (this.props.step !== prevProps.step) {\n        var spinnerStep = this._parseNum(this.props.step);\n\n        if (!this.isTypeDecimal() && spinnerStep < 1) {\n          spinnerStep = 1;\n        }\n\n        this.setState({\n          step: spinnerStep\n        });\n      }\n\n      if (this.props.longStep !== prevProps.longStep) {\n        var spinnerLongStep = this._parseNum(this.props.longStep);\n\n        if (!this.isTypeDecimal() && spinnerLongStep < 1) {\n          spinnerLongStep = 0;\n        }\n\n        this.setState({\n          longStep: spinnerLongStep\n        });\n      }\n    }\n  }, {\n    key: \"_setStateMin\",\n    value: function _setStateMin() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.setState({\n        value: \"\"\n      }, callback);\n    }\n  }, {\n    key: \"_setStateMax\",\n    value: function _setStateMax() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.setState({\n        value: this.state.max\n      }, callback);\n    }\n  }, {\n    key: \"_clearMinTimer\",\n    value: function _clearMinTimer() {\n      clearTimeout(this.maxTimer);\n      this.maxTimer = null;\n    }\n  }, {\n    key: \"_clearMaxTimer\",\n    value: function _clearMaxTimer() {\n      clearTimeout(this.minTimer);\n      this.minTimer = null;\n    }\n  }, {\n    key: \"_clearIncreaseTimer\",\n    value: function _clearIncreaseTimer() {\n      clearTimeout(this.increaseTimer);\n      this.increaseTimer = null;\n    }\n  }, {\n    key: \"_clearDecreaseTimer\",\n    value: function _clearDecreaseTimer() {\n      clearTimeout(this.decreaseTimer);\n      this.decreaseTimer = null;\n    }\n  }, {\n    key: \"_clearOnChangeTimers\",\n    value: function _clearOnChangeTimers() {\n      this._clearMaxTimer();\n\n      this._clearMinTimer();\n    }\n  }, {\n    key: \"_clearTimers\",\n    value: function _clearTimers() {\n      this._clearOnChangeTimers();\n\n      this._clearIncreaseTimer();\n\n      this._clearDecreaseTimer();\n    }\n  }, {\n    key: \"onIncrease\",\n    value: function onIncrease(number) {\n      if (isCallable(this.props.onIncrease)) {\n        return this.props.onIncrease(number);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onDecrease\",\n    value: function onDecrease(number) {\n      if (isCallable(this.props.onDecrease)) {\n        return this.props.onDecrease(number);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onMax\",\n    value: function onMax(number) {\n      if (isCallable(this.props.onMax)) {\n        this.props.onMax(number);\n      }\n\n      this._resetHoldTime();\n    }\n  }, {\n    key: \"onMin\",\n    value: function onMin(number) {\n      if (isCallable(this.props.onMin)) {\n        this.props.onMin(number);\n      }\n\n      this._resetHoldTime();\n    }\n  }, {\n    key: \"onLongPress\",\n    value: function onLongPress(number) {\n      if (isCallable(this.props.onLongPress)) {\n        this.props.onLongPress(number);\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(value) {\n      var isPressEvent,\n          isEmptyValue,\n          num,\n          parsedNum,\n          separator,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.async(function onChange$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              isPressEvent = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n              isEmptyValue = isEmpty(value);\n\n              this._clearOnChangeTimers();\n\n              num = value;\n              parsedNum = value;\n\n              if (isEmptyValue) {\n                num = this.state.min;\n              }\n\n              if (!this.props.disabled) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 8:\n              separator = !isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\";\n\n              if (String(num).endsWith(separator) && !this.getValue().endsWith(separator + \"0\")) {\n                this.decimalInput = true;\n              }\n\n              num = parsedNum = this._parseNum(String(num).replace(/^0+/, \"\")) || 0;\n\n              if (!this.isMinReached(num)) {\n                if (this.isMaxReached(num)) {\n                  if (this.isMaxReached(num)) {\n                    parsedNum = this.state.max;\n\n                    if (!isEmptyValue) {\n                      this.maxTimer = this._debounceSetMax();\n                    }\n\n                    this.onMax(parsedNum);\n                  }\n                }\n              } else {\n                if (!isEmptyValue) {\n                  this.minTimer = this._debounceSetMin();\n                }\n\n                if (isEmptyValue && this.isEmptied()) {\n                  num = parsedNum = null;\n                } else {\n                  parsedNum = this.state.min;\n                }\n\n                this.onMin(parsedNum);\n              }\n\n              if (isEmptyValue && this.isEmptied()) {\n                num = parsedNum = null;\n              } else {\n                num = this._withinRange(num);\n              }\n\n              if (!(this.state.value !== num && isCallable(this.props.onChange))) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(this.props.onChange(parsedNum));\n\n            case 16:\n              res = _context.sent;\n\n              if (isEmptyValue) {\n                _context.next = 23;\n                break;\n              }\n\n              if (!(res === false)) {\n                _context.next = 22;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 22:\n              if (isNumeric(res)) {\n                num = this._parseNum(res);\n              }\n\n            case 23:\n              this.setState({\n                value: num\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onPressOut\",\n    value: function onPressOut(e) {\n      this._resetHoldTime();\n    }\n  }, {\n    key: \"onShowUnderlay\",\n    value: function onShowUnderlay(buttonDirection) {\n      this.setState({\n        buttonPress: buttonDirection\n      });\n    }\n  }, {\n    key: \"onHideUnderlay\",\n    value: function onHideUnderlay() {\n      this.setState({\n        buttonPress: null\n      });\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      if (isCallable(this.props.onSubmit)) {\n        this.props.onSubmit(this._parseNum(e.nativeEvent.text));\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n\n      this.setState({\n        focused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: \"onKeyPress\",\n    value: function onKeyPress(e) {\n      if (this.props.onKeyPress) {\n        this.props.onKeyPress(e);\n      }\n    }\n  }, {\n    key: \"_roundNum\",\n    value: function _roundNum(num) {\n      if (this.isTypeDecimal()) {\n        var val = num * Math.pow(10, this.props.precision);\n        var fraction = Math.round((val - parseInt(val)) * 10) / 10;\n\n        if (fraction === -0.5) {\n          fraction = -0.6;\n        }\n\n        val = Math.round(parseInt(val) + fraction) / Math.pow(10, this.props.precision);\n        return val;\n      }\n\n      return num;\n    }\n  }, {\n    key: \"_withinRange\",\n    value: function _withinRange(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (min == null && this.state && this.state.min != null) {\n        min = this.state.min;\n      }\n\n      if (max == null && this.state && this.state.max != null) {\n        max = this.state.max;\n      }\n\n      if (min != null && value < min) {\n        value = min;\n      }\n\n      if (max != null && value > max) {\n        value = max;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_parseNum\",\n    value: function _parseNum(num) {\n      num = String(num).replace(!isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\", \".\");\n\n      if (this.isTypeDecimal()) {\n        num = parseFloat(num);\n      } else {\n        num = parseInt(num);\n      }\n\n      if (isNaN(num)) {\n        num = 0;\n      }\n\n      this._roundNum(num);\n\n      return num;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this.state.value;\n\n      if (isEmpty(value)) {\n        return \"\";\n      }\n\n      if (this.isTypeDecimal() && this.decimalInput) {\n        this.decimalInput = false;\n        value = this._parseNum(value).toFixed(1).replace(/0+$/, \"\");\n      } else if (this.isTypeDecimal()) {\n        value = String(this._parseNum(this._parseNum(value).toFixed(this.props.precision)));\n      } else {\n        value = String(this._parseNum(value));\n      }\n\n      var hasPlaceholder = value === \"0\" && !isEmpty(this.props.placeholder);\n      return hasPlaceholder ? \"\" : value.replace(\".\", !isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\");\n    }\n  }, {\n    key: \"getPlaceholder\",\n    value: function getPlaceholder() {\n      if (!isEmpty(this.props.placeholder)) {\n        return this.props.placeholder;\n      } else if (isEmpty(this.state.value) && this.isEmptied()) {\n        return \"\";\n      } else {\n        return String(this.state.min);\n      }\n    }\n  }, {\n    key: \"getPlaceholderColor\",\n    value: function getPlaceholderColor() {\n      if (this.props.placeholderTextColor) {\n        return this.props.placeholderTextColor;\n      }\n\n      var textColor = this._getInputTextColor();\n\n      var parse = parseColor(textColor);\n      parse[3] = Math.round(0.6 * 255);\n      return colorsToHex(parse);\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      var type = this.props.type;\n\n      if (this.props.type != null) {\n        type = this.props.type;\n      }\n\n      return String(type).toLowerCase();\n    }\n  }, {\n    key: \"isTypeDecimal\",\n    value: function isTypeDecimal() {\n      var type = this.getType();\n      return type === \"float\" || type === \"double\" || type === \"decimal\" || type === \"real\";\n    }\n  }, {\n    key: \"_startHoldTime\",\n    value: function _startHoldTime() {\n      this.holdTime = new Date().getTime();\n    }\n  }, {\n    key: \"_getHoldTime\",\n    value: function _getHoldTime() {\n      if (isEmpty(this.holdTime)) {\n        return 0;\n      }\n\n      var now = new Date().getTime();\n      return now - this.holdTime;\n    }\n  }, {\n    key: \"_resetHoldTime\",\n    value: function _resetHoldTime() {\n      this.holdTime = null;\n\n      this._clearTimers();\n    }\n  }, {\n    key: \"_getHoldChangeInterval\",\n    value: function _getHoldChangeInterval() {\n      var minInterval = 10;\n      var time = (10 - Math.log(this.props.speed * this._getHoldTime())) * 100;\n      return time < minInterval ? minInterval : time;\n    }\n  }, {\n    key: \"increaseHold\",\n    value: function increaseHold(event) {\n      return _regeneratorRuntime.async(function increaseHold$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.increase(event, true);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"increase\",\n    value: function increase(event) {\n      var isLongPress,\n          currentValue,\n          num,\n          res,\n          wait,\n          _args3 = arguments;\n      return _regeneratorRuntime.async(function increase$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              isLongPress = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;\n\n              if (!this._isDisabledButtonRight()) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              currentValue = this._parseNum(this.state.value);\n              num = currentValue + this._parseNum(isLongPress && this.state.longStep > 0 ? this.state.longStep : this.state.step);\n\n              if (isLongPress && this.state.longStep > 0) {\n                num = Math.round(num / this.state.longStep) * this.state.longStep;\n              }\n\n              if (this.isTypeDecimal()) {\n                num = Number(num.toFixed(this.props.precision));\n              }\n\n              if (!(this.isMaxReached(currentValue) && !this.isEmptied() && this.isContinuos())) {\n                _context3.next = 11;\n                break;\n              }\n\n              num = this.state.min;\n              _context3.next = 13;\n              break;\n\n            case 11:\n              if (!this.isMaxReached(currentValue)) {\n                _context3.next = 13;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              _context3.next = 15;\n              return _regeneratorRuntime.awrap(this.onIncrease(num));\n\n            case 15:\n              res = _context3.sent;\n\n              if (!(res === false)) {\n                _context3.next = 20;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 20:\n              if (isNumeric(res)) {\n                num = this._parseNum(res);\n              }\n\n            case 21:\n              wait = this._getHoldChangeInterval();\n\n              if (!isLongPress && this.increaseTimer === null) {\n                this._startHoldTime();\n\n                wait = this.props.accelerationDelay;\n              } else if (isLongPress) {\n                this.onLongPress(num);\n              }\n\n              if (isLongPress) {\n                this.increaseTimer = setTimeout(this.increase.bind(this, event, true), wait);\n              }\n\n              this.onChange(num, true);\n\n            case 25:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"decreaseHold\",\n    value: function decreaseHold(event) {\n      return _regeneratorRuntime.async(function decreaseHold$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this.decrease(event, true);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"decrease\",\n    value: function decrease(event) {\n      var isLongPress,\n          currentValue,\n          num,\n          res,\n          wait,\n          _args5 = arguments;\n      return _regeneratorRuntime.async(function decrease$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              isLongPress = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : false;\n\n              if (!this._isDisabledButtonLeft()) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 3:\n              currentValue = this._parseNum(this.state.value);\n              num = currentValue - this._parseNum(isLongPress && this.state.longStep > 0 ? this.state.longStep : this.state.step);\n\n              if (isLongPress && this.state.longStep > 0) {\n                num = Math.round(num / this.state.longStep) * this.state.longStep;\n              }\n\n              if (this.isTypeDecimal()) {\n                num = Number(num.toFixed(this.props.precision));\n              }\n\n              if (!(this.isMinReached(currentValue) && !this.isEmptied() && this.isContinuos())) {\n                _context5.next = 11;\n                break;\n              }\n\n              num = this.state.max;\n              _context5.next = 13;\n              break;\n\n            case 11:\n              if (!this.isMinReached(currentValue)) {\n                _context5.next = 13;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 13:\n              _context5.next = 15;\n              return _regeneratorRuntime.awrap(this.onDecrease(num));\n\n            case 15:\n              res = _context5.sent;\n\n              if (!(res === false)) {\n                _context5.next = 20;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 20:\n              if (isNumeric(res)) {\n                num = this._parseNum(res);\n              }\n\n            case 21:\n              wait = this._getHoldChangeInterval();\n\n              if (!isLongPress && this.decreaseTimer === null) {\n                this._startHoldTime();\n\n                wait = this.props.accelerationDelay;\n              } else if (isLongPress) {\n                this.onLongPress(num);\n              }\n\n              if (isLongPress) {\n                this.decreaseTimer = setTimeout(this.decrease.bind(this, event, true), wait);\n              }\n\n              this.onChange(num, true);\n\n            case 25:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isMaxReached\",\n    value: function isMaxReached() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.state.max != null) {\n        if (num == null) {\n          num = this.state.value;\n        }\n\n        return num >= this.state.max;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isMinReached\",\n    value: function isMinReached() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.state.min != null) {\n        if (num == null) {\n          num = this.state.value;\n        }\n\n        return num <= this.state.min;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.textInput.blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.textInput.focus();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.textInput.clear();\n    }\n  }, {\n    key: \"isEditable\",\n    value: function isEditable() {\n      return (this.props.disabled !== true || this.props.disabled != null) && this.props.editable !== false;\n    }\n  }, {\n    key: \"isContinuos\",\n    value: function isContinuos() {\n      return this.props.continuity !== false;\n    }\n  }, {\n    key: \"isEmptied\",\n    value: function isEmptied() {\n      return this.props.emptied !== false;\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.state.focus !== false;\n    }\n  }, {\n    key: \"_isDisabledButtonLeft\",\n    value: function _isDisabledButtonLeft() {\n      return this.props.disabled !== false || this.props.buttonLeftDisabled !== false;\n    }\n  }, {\n    key: \"_isDisabledButtonRight\",\n    value: function _isDisabledButtonRight() {\n      return this.props.disabled !== false || this.props.buttonRightDisabled !== false;\n    }\n  }, {\n    key: \"_isRightButtonPressed\",\n    value: function _isRightButtonPressed() {\n      return this.state.buttonPress === \"right\";\n    }\n  }, {\n    key: \"_isLeftButtonPressed\",\n    value: function _isLeftButtonPressed() {\n      return this.state.buttonPress === \"left\";\n    }\n  }, {\n    key: \"_getKeyboardType\",\n    value: function _getKeyboardType() {\n      var keyboardType = \"number-pad\";\n\n      if (this.isTypeDecimal()) {\n        keyboardType = \"decimal-pad\";\n      }\n\n      return keyboardType;\n    }\n  }, {\n    key: \"_getAutoCapitalize\",\n    value: function _getAutoCapitalize() {\n      var autoCapitalize = this.props.autoCapitalize ? this.props.autoCapitalize : \"none\";\n\n      if (this.isTypeDecimal()) {\n        autoCapitalize = \"words\";\n      }\n\n      return autoCapitalize;\n    }\n  }, {\n    key: \"_getMainColor\",\n    value: function _getMainColor() {\n      var color = this.props.color;\n\n      if (this.props.colorAsBackground) {\n        color = defaultTransparent;\n      } else if (isTransparentColor(color)) {\n        color = defaultTransparent;\n      }\n\n      return color;\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor() {\n      var color = this._getMainColor();\n\n      return this.isMaxReached() ? this._getColorMax() : this.isMinReached() ? this._getColorMin() : color;\n    }\n  }, {\n    key: \"_getColorMin\",\n    value: function _getColorMin() {\n      if (!this.props.colorMin) {\n        return this.props.color;\n      }\n\n      return this.props.colorMin;\n    }\n  }, {\n    key: \"_getColorMax\",\n    value: function _getColorMax() {\n      if (!this.props.colorMax) {\n        return this.props.color;\n      }\n\n      return this.props.colorMax;\n    }\n  }, {\n    key: \"_getColorPress\",\n    value: function _getColorPress() {\n      var color = this.props.colorAsBackground ? defaultTransparent : this.props.color;\n      return this.props.colorPress !== defaultColor ? this.props.colorPress : color;\n    }\n  }, {\n    key: \"_getColorPressText\",\n    value: function _getColorPressText() {\n      var color = this.props.colorAsBackground ? this._getColorBackground() : this._getColorPress();\n      var pressColor = this.props.buttonPressTextColor ? this.props.buttonPressTextColor : this._getColorText();\n      var textColor = this.props.buttonPressTextColor !== this.props.buttonTextColor ? pressColor : \"auto\";\n\n      if (String(textColor).toLowerCase().trim() === \"auto\") {\n        textColor = getColorContrast(color);\n      }\n\n      return textColor;\n    }\n  }, {\n    key: \"_getColorText\",\n    value: function _getColorText() {\n      var color = this.props.colorAsBackground ? this._getColorBackground() : this._getColor();\n      var textColor = this._getColor() !== this._getMainColor() ? \"auto\" : this.props.buttonTextColor ? this.props.buttonTextColor : \"auto\";\n\n      if (String(textColor).toLowerCase().trim() === \"auto\") {\n        textColor = getColorContrast(color);\n      }\n\n      return textColor;\n    }\n  }, {\n    key: \"_getColorLeftButton\",\n    value: function _getColorLeftButton() {\n      var color = this._getColor();\n\n      return this.props.colorLeft !== defaultColor ? this.props.colorLeft : color;\n    }\n  }, {\n    key: \"_getColorRightButton\",\n    value: function _getColorRightButton() {\n      var color = this._getColor();\n\n      return this.props.colorRight !== defaultColor ? this.props.colorRight : color;\n    }\n  }, {\n    key: \"_getColorBackground\",\n    value: function _getColorBackground() {\n      var color = this.props.color;\n      var background = this.props.background;\n\n      if (isTransparentColor(color)) {\n        color = defaultTransparent;\n      }\n\n      if (isTransparentColor(background)) {\n        background = defaultTransparent;\n      }\n\n      return this.props.colorAsBackground ? this.isMaxReached() ? this._getColorMax() : this.isMinReached() ? this._getColorMin() : color : background;\n    }\n  }, {\n    key: \"_getContainerStyle\",\n    value: function _getContainerStyle() {\n      var backgroundColor = this._getColorBackground();\n\n      return [Style.container, {\n        minHeight: this.props.height,\n        width: this.props.width,\n        backgroundColor: backgroundColor\n      }, this.props.showBorder ? {\n        borderWidth: 0.5,\n        borderColor: this._getColor()\n      } : {}, this.props.shadow ? Style.containerShadow : {}, this.props.rounded ? {\n        borderRadius: this.props.height / 2\n      } : {}, this.props.style];\n    }\n  }, {\n    key: \"_getInputTextColor\",\n    value: function _getInputTextColor() {\n      var backgroundColor = this._getColorBackground();\n\n      return this.props.textColor ? this.props.textColor : getColorContrast(backgroundColor);\n    }\n  }, {\n    key: \"_getInputTextStyle\",\n    value: function _getInputTextStyle() {\n      var backgroundColor = this._getColorBackground();\n\n      return [Style.numberText, {\n        color: this._getInputTextColor(),\n        fontSize: this.props.fontSize,\n        fontFamily: this.props.fontFamily,\n        backgroundColor: backgroundColor,\n        height: this.props.height\n      }, this.props.showBorder ? {\n        borderWidth: 0.5,\n        borderColor: this._getColor()\n      } : {}, this.props.inputStyle];\n    }\n  }, {\n    key: \"_getStyleButton\",\n    value: function _getStyleButton() {\n      var size = this.props.height;\n      return {\n        height: size,\n        width: size\n      };\n    }\n  }, {\n    key: \"_getStyleButtonPress\",\n    value: function _getStyleButtonPress() {\n      return isEmpty(this.props.buttonPressStyle) ? this.props.buttonStyle : this.props.buttonPressStyle;\n    }\n  }, {\n    key: \"_getStyleButtonText\",\n    value: function _getStyleButtonText() {\n      return [Style.buttonText, {\n        fontSize: this.props.buttonFontSize,\n        fontFamily: this.props.buttonFontFamily,\n        lineHeight: this.props.height\n      }, this.props.buttonTextStyle ? this.props.buttonTextStyle : {}];\n    }\n  }, {\n    key: \"_getStyleLeftButtonText\",\n    value: function _getStyleLeftButtonText() {\n      return [Style.buttonText, this._getStyleButtonText(), {\n        color: this._isLeftButtonPressed() ? this._getColorPressText() : this._getColorText()\n      }, this._isLeftButtonPressed() ? this.props.buttonPressTextStyle : {}];\n    }\n  }, {\n    key: \"_getStyleRightButtonText\",\n    value: function _getStyleRightButtonText() {\n      return [Style.buttonText, this._getStyleButtonText(), {\n        color: this._isRightButtonPressed() ? this._getColorPressText() : this._getColorText()\n      }, this._isRightButtonPressed() ? this.props.buttonPressTextStyle : {}];\n    }\n  }, {\n    key: \"_renderLeftButtonElement\",\n    value: function _renderLeftButtonElement() {\n      if (this.props.buttonLeftImage) {\n        return this.props.buttonLeftImage;\n      } else if (this._isLeftButtonPressed() && this.props.buttonPressLeftImage) {\n        return this.props.buttonPressLeftImage;\n      } else {\n        var text = this.props.arrows !== false ? \"❮\" : this.props.buttonLeftText ? this.props.buttonLeftText : \"-\";\n        return React.createElement(Text, _extends({}, this.props.buttonTextProps, {\n          style: this._getStyleLeftButtonText(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1195,\n            columnNumber: 11\n          }\n        }), text);\n      }\n    }\n  }, {\n    key: \"_renderRightButtonElement\",\n    value: function _renderRightButtonElement() {\n      if (this.props.buttonRightImage) {\n        return this.props.buttonRightImage;\n      } else if (this._isRightButtonPressed() && this.props.buttonPressRightImage) {\n        return this.props.buttonPressRightImage;\n      } else {\n        var text = this.props.arrows !== false ? \"❯\" : this.props.buttonRightText ? this.props.buttonRightText : \"+\";\n        return React.createElement(Text, _extends({}, this.props.buttonTextProps, {\n          style: this._getStyleRightButtonText(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1219,\n            columnNumber: 11\n          }\n        }), text);\n      }\n    }\n  }, {\n    key: \"_renderLeftButton\",\n    value: function _renderLeftButton() {\n      var colorLeft = this._getColorLeftButton();\n\n      var buttonStyle = mergeViewStyle(this._isLeftButtonPressed() ? this._getStyleButtonPress() : this.props.buttonStyle, [this._getStyleButton(), {\n        borderColor: this.props.showBorder ? colorLeft : \"transparent\",\n        backgroundColor: colorLeft\n      }, this.props.rounded ? Style.buttonRounded : Style.buttonLeft]);\n      return React.createElement(TouchableHighlight, _extends({\n        activeOpacity: this.props.activeOpacity,\n        underlayColor: this._getColorPress(),\n        onHideUnderlay: this.onHideUnderlay.bind(this),\n        onShowUnderlay: this.onShowUnderlay.bind(this, \"left\"),\n        disabled: this._isDisabledButtonLeft(),\n        style: buttonStyle,\n        onPressIn: this.decrease.bind(this),\n        onPressOut: this.onPressOut.bind(this),\n        onLongPress: this.decreaseHold.bind(this),\n        delayLongPress: this.props.accelerationDelay\n      }, this.props.leftButtonProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1246,\n          columnNumber: 4\n        }\n      }), this._renderLeftButtonElement());\n    }\n  }, {\n    key: \"_renderRightButton\",\n    value: function _renderRightButton() {\n      var colorRight = this._getColorRightButton();\n\n      var buttonStyle = mergeViewStyle(this._isRightButtonPressed() ? this._getStyleButtonPress() : this.props.buttonStyle, [this._getStyleButton(), {\n        borderColor: this.props.showBorder ? colorRight : \"transparent\",\n        backgroundColor: colorRight\n      }, this.props.rounded ? Style.buttonRounded : Style.buttonRight]);\n      return React.createElement(TouchableHighlight, _extends({\n        activeOpacity: this.props.activeOpacity,\n        underlayColor: this._getColorPress(),\n        onHideUnderlay: this.onHideUnderlay.bind(this),\n        onShowUnderlay: this.onShowUnderlay.bind(this, \"right\"),\n        disabled: this._isDisabledButtonRight(),\n        style: buttonStyle,\n        onPressIn: this.increase.bind(this),\n        onPressOut: this.onPressOut.bind(this),\n        onLongPress: this.increaseHold.bind(this),\n        delayLongPress: this.props.accelerationDelay\n      }, this.props.rightButtonProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1286,\n          columnNumber: 4\n        }\n      }), this._renderRightButtonElement());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, _extends({\n        style: this._getContainerStyle()\n      }, this.props.containerProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1309,\n          columnNumber: 4\n        }\n      }), this._renderLeftButton(), this.props.prepend, React.createElement(TextInput, _extends({\n        ref: function ref(input) {\n          return _this2.textInput = input;\n        },\n        style: this._getInputTextStyle(),\n        value: this.getValue(),\n        placeholder: this.getPlaceholder(),\n        placeholderTextColor: this.getPlaceholderColor(),\n        selectionColor: this.props.selectionColor,\n        selectTextOnFocus: this.props.selectTextOnFocus,\n        returnKeyType: this.props.returnKeyType,\n        returnKeyLabel: this.props.returnKeyLabel,\n        autoFocus: this.props.autoFocus,\n        autoCapitalize: this._getAutoCapitalize(),\n        editable: this.isEditable(),\n        maxLength: this.props.maxLength,\n        onKeyPress: this.onKeyPress.bind(this),\n        onFocus: this.onFocus.bind(this),\n        onBlur: this.onBlur.bind(this),\n        keyboardType: this._getKeyboardType(),\n        onChangeText: this.onChange.bind(this),\n        onSubmitEditing: this.onSubmit.bind(this)\n      }, this.props.inputProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1314,\n          columnNumber: 5\n        }\n      })), this.props.children, this.props.append, this._renderRightButton());\n    }\n  }]);\n\n  return InputSpinner;\n}(Component);\n\nInputSpinner.propTypes = {\n  type: PropTypes.string,\n  skin: PropTypes.string,\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  initialValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  longStep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  precision: PropTypes.number,\n  shadow: PropTypes.bool,\n  rounded: PropTypes.bool,\n  activeOpacity: PropTypes.number,\n  color: PropTypes.string,\n  colorPress: PropTypes.string,\n  colorRight: PropTypes.string,\n  colorLeft: PropTypes.string,\n  colorMax: PropTypes.string,\n  colorMin: PropTypes.string,\n  colorAsBackground: PropTypes.bool,\n  background: PropTypes.string,\n  textColor: PropTypes.string,\n  arrows: PropTypes.bool,\n  showBorder: PropTypes.bool,\n  fontSize: PropTypes.number,\n  fontFamily: PropTypes.string,\n  buttonFontSize: PropTypes.number,\n  buttonFontFamily: PropTypes.string,\n  buttonTextColor: PropTypes.string,\n  maxLength: PropTypes.number,\n  disabled: PropTypes.bool,\n  editable: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  selectTextOnFocus: PropTypes.bool,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  selectionColor: PropTypes.string,\n  returnKeyLabel: PropTypes.string,\n  returnKeyType: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onMin: PropTypes.func,\n  onMax: PropTypes.func,\n  onIncrease: PropTypes.func,\n  onDecrease: PropTypes.func,\n  onSubmit: PropTypes.func,\n  onLongPress: PropTypes.func,\n  accelerationDelay: PropTypes.number,\n  speed: PropTypes.number,\n  emptied: PropTypes.bool,\n  continuity: PropTypes.bool,\n  typingTime: PropTypes.number,\n  buttonLeftDisabled: PropTypes.bool,\n  buttonRightDisabled: PropTypes.bool,\n  buttonLeftText: PropTypes.string,\n  buttonRightText: PropTypes.string,\n  buttonLeftImage: PropTypes.element,\n  buttonRightImage: PropTypes.element,\n  buttonPressLeftImage: PropTypes.element,\n  buttonPressRightImage: PropTypes.element,\n  buttonStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number, PropTypes.string]),\n  buttonTextStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number, PropTypes.string]),\n  buttonPressStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number, PropTypes.string]),\n  buttonPressTextStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number, PropTypes.string]),\n  inputStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number, PropTypes.string]),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number, PropTypes.string]),\n  append: PropTypes.element,\n  prepend: PropTypes.element,\n  decimalSeparator: PropTypes.string,\n  containerProps: PropTypes.object,\n  inputProps: PropTypes.object,\n  leftButtonProps: PropTypes.object,\n  rightButtonProps: PropTypes.object,\n  buttonTextProps: PropTypes.object\n};\nInputSpinner.defaultProps = {\n  type: \"int\",\n  skin: null,\n  min: 0,\n  max: null,\n  value: 0,\n  initialValue: null,\n  step: 1,\n  longStep: 0,\n  precision: 2,\n  rounded: true,\n  shadow: false,\n  activeOpacity: 0.85,\n  color: defaultColor,\n  colorPress: defaultColor,\n  colorRight: defaultColor,\n  colorLeft: defaultColor,\n  colorAsBackground: false,\n  background: \"transparent\",\n  textColor: null,\n  arrows: false,\n  showBorder: false,\n  fontSize: 14,\n  fontFamily: defaultFont,\n  buttonFontSize: 25,\n  buttonFontFamily: defaultFont,\n  buttonTextColor: null,\n  buttonPressTextColor: null,\n  maxLength: null,\n  disabled: false,\n  editable: true,\n  autoFocus: false,\n  selectTextOnFocus: null,\n  selectionColor: null,\n  returnKeyLabel: null,\n  returnKeyType: null,\n  width: \"auto\",\n  height: 50,\n  accelerationDelay: defaultAccelerationDelay,\n  speed: defaultSpeed,\n  emptied: false,\n  continuity: false,\n  typingTime: defaultTypingTime,\n  buttonLeftDisabled: false,\n  buttonRightDisabled: false,\n  buttonLeftText: null,\n  buttonRightText: null,\n  buttonStyle: null,\n  buttonTextStyle: null,\n  buttonPressStyle: null,\n  buttonPressTextStyle: null,\n  inputStyle: null,\n  style: null,\n  decimalSeparator: \".\",\n  containerProps: null,\n  inputProps: null,\n  leftButtonProps: null,\n  rightButtonProps: null,\n  buttonTextProps: null\n};\nexport default InputSpinner;","map":{"version":3,"sources":["/Users/raj/Desktop/skrt/node_modules/react-native-input-spinner/src/InputSpinner.js"],"names":["React","Component","PropTypes","defaultColor","defaultTransparent","defaultFont","Style","colorsToHex","debounce","getColorContrast","isCallable","isEmpty","isNumeric","isTransparentColor","mergeViewStyle","parseColor","defaultSpeed","defaultAccelerationDelay","defaultTypingTime","InputSpinner","props","increaseTimer","decreaseTimer","holdTime","spinnerStep","_parseNum","step","isTypeDecimal","spinnerLongStep","longStep","min","max","initialValue","isNaN","value","_withinRange","_debounceSetMax","_setStateMax","bind","typingTime","_debounceSetMin","_setStateMin","_updateValue","setState","state","focused","buttonPress","prevProps","newValue","callback","clearTimeout","maxTimer","minTimer","_clearMaxTimer","_clearMinTimer","_clearOnChangeTimers","_clearIncreaseTimer","_clearDecreaseTimer","number","onIncrease","onDecrease","onMax","_resetHoldTime","onMin","onLongPress","isPressEvent","isEmptyValue","num","parsedNum","disabled","separator","decimalSeparator","String","endsWith","getValue","decimalInput","replace","isMinReached","isMaxReached","isEmptied","onChange","res","e","buttonDirection","onSubmit","nativeEvent","text","onFocus","onBlur","onKeyPress","val","Math","pow","precision","fraction","round","parseInt","parseFloat","_roundNum","toFixed","hasPlaceholder","placeholder","placeholderTextColor","textColor","_getInputTextColor","parse","type","toLowerCase","getType","Date","getTime","now","_clearTimers","minInterval","time","log","speed","_getHoldTime","event","increase","isLongPress","_isDisabledButtonRight","currentValue","Number","isContinuos","wait","_getHoldChangeInterval","_startHoldTime","accelerationDelay","setTimeout","decrease","_isDisabledButtonLeft","textInput","blur","focus","clear","editable","continuity","emptied","buttonLeftDisabled","buttonRightDisabled","keyboardType","autoCapitalize","color","colorAsBackground","_getMainColor","_getColorMax","_getColorMin","colorMin","colorMax","colorPress","_getColorBackground","_getColorPress","pressColor","buttonPressTextColor","_getColorText","buttonTextColor","trim","_getColor","colorLeft","colorRight","background","backgroundColor","container","minHeight","height","width","showBorder","borderWidth","borderColor","shadow","containerShadow","rounded","borderRadius","style","numberText","fontSize","fontFamily","inputStyle","size","buttonPressStyle","buttonStyle","buttonText","buttonFontSize","buttonFontFamily","lineHeight","buttonTextStyle","_getStyleButtonText","_isLeftButtonPressed","_getColorPressText","buttonPressTextStyle","_isRightButtonPressed","buttonLeftImage","buttonPressLeftImage","arrows","buttonLeftText","buttonTextProps","_getStyleLeftButtonText","buttonRightImage","buttonPressRightImage","buttonRightText","_getStyleRightButtonText","_getColorLeftButton","_getStyleButtonPress","_getStyleButton","buttonRounded","buttonLeft","activeOpacity","onHideUnderlay","onShowUnderlay","onPressOut","decreaseHold","leftButtonProps","_renderLeftButtonElement","_getColorRightButton","buttonRight","increaseHold","rightButtonProps","_renderRightButtonElement","_getContainerStyle","containerProps","_renderLeftButton","prepend","input","_getInputTextStyle","getPlaceholder","getPlaceholderColor","selectionColor","selectTextOnFocus","returnKeyType","returnKeyLabel","autoFocus","_getAutoCapitalize","isEditable","maxLength","_getKeyboardType","inputProps","children","append","_renderRightButton","propTypes","string","skin","oneOfType","bool","func","element","object","array","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {\n\tPlatform,\n\tText,\n\tTextInput,\n\tTouchableHighlight,\n\tView,\n} from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport {defaultColor, defaultTransparent, defaultFont, Style} from \"./Style\";\nimport {\n\tcolorsToHex,\n\tdebounce,\n\tgetColorContrast,\n\tisCallable,\n\tisEmpty,\n\tisNumeric,\n\tisTransparentColor,\n\tmergeViewStyle,\n\tparseColor,\n} from \"./Utils\";\n\n/**\n * Default constants\n */\nexport const defaultSpeed = 7;\nexport const defaultAccelerationDelay = 1000;\nexport const defaultTypingTime = 500;\n\n/**\n * Input Spinner\n * @author Marco Cesarato <cesarato.developer@gmail.com>\n */\nclass InputSpinner extends Component {\n\t/**\n\t * Constructor\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Timers\n\t\tthis.increaseTimer = null;\n\t\tthis.decreaseTimer = null;\n\t\tthis.holdTime = null;\n\n\t\tlet spinnerStep = this._parseNum(this.props.step);\n\t\tif (!this.isTypeDecimal() && spinnerStep < 1) {\n\t\t\tspinnerStep = 1;\n\t\t}\n\t\tlet spinnerLongStep = this._parseNum(this.props.longStep);\n\t\tif (!this.isTypeDecimal() && spinnerLongStep < 1) {\n\t\t\tspinnerLongStep = 0;\n\t\t}\n\n\t\tconst min = this.props.min != null ? this._parseNum(this.props.min) : null;\n\t\tconst max = this.props.max != null ? this._parseNum(this.props.max) : null;\n\n\t\tlet initialValue =\n\t\t\tthis.props.initialValue != null && !isNaN(12)\n\t\t\t\t? this.props.initialValue\n\t\t\t\t: this.props.value;\n\t\tinitialValue = this._parseNum(initialValue);\n\t\tinitialValue = this._withinRange(initialValue, min, max);\n\n\t\t// Set debounce\n\t\tthis._debounceSetMax = debounce(\n\t\t\tthis._setStateMax.bind(this),\n\t\t\tthis.props.typingTime,\n\t\t);\n\t\tthis._debounceSetMin = debounce(\n\t\t\tthis._setStateMin.bind(this),\n\t\t\tthis.props.typingTime,\n\t\t);\n\t\tthis._updateValue = debounce((value) => {\n\t\t\tthis.setState({value: value});\n\t\t}, 250);\n\n\t\tthis.state = {\n\t\t\tmin: min,\n\t\t\tmax: max,\n\t\t\tvalue: initialValue,\n\t\t\tstep: spinnerStep,\n\t\t\tlongStep: spinnerLongStep,\n\t\t\tfocused: false,\n\t\t\tbuttonPress: null,\n\t\t};\n\t}\n\n\t/**\n\t * Component did update\n\t * @param prevProps\n\t * @returns {*}\n\t */\n\tcomponentDidUpdate(prevProps) {\n\t\t// Parse Value\n\t\tif (this.props.value !== prevProps.value) {\n\t\t\tlet newValue = this._parseNum(this.props.value);\n\t\t\tnewValue = this._withinRange(newValue);\n\t\t\tthis._updateValue(newValue);\n\t\t}\n\t\t// Parse Min\n\t\tif (this.props.min !== prevProps.min) {\n\t\t\tthis.setState({\n\t\t\t\tmin: this.props.min != null ? this._parseNum(this.props.min) : null,\n\t\t\t});\n\t\t}\n\t\t// Parse Max\n\t\tif (this.props.max !== prevProps.max) {\n\t\t\tthis.setState({\n\t\t\t\tmax: this.props.max != null ? this._parseNum(this.props.max) : null,\n\t\t\t});\n\t\t}\n\t\t// Parse Step\n\t\tif (this.props.step !== prevProps.step) {\n\t\t\tlet spinnerStep = this._parseNum(this.props.step);\n\t\t\tif (!this.isTypeDecimal() && spinnerStep < 1) {\n\t\t\t\tspinnerStep = 1;\n\t\t\t}\n\t\t\tthis.setState({step: spinnerStep});\n\t\t}\n\t\t// Parse longStep\n\t\tif (this.props.longStep !== prevProps.longStep) {\n\t\t\tlet spinnerLongStep = this._parseNum(this.props.longStep);\n\t\t\tif (!this.isTypeDecimal() && spinnerLongStep < 1) {\n\t\t\t\tspinnerLongStep = 0;\n\t\t\t}\n\t\t\tthis.setState({longStep: spinnerLongStep});\n\t\t}\n\t}\n\n\t/**\n\t * Set state to min\n\t * @param callback\n\t * @private\n\t */\n\t_setStateMin(callback = null) {\n\t\treturn this.setState({value: \"\"}, callback);\n\t}\n\n\t/**\n\t * Set state to max\n\t * @param callback\n\t * @private\n\t */\n\t_setStateMax(callback = null) {\n\t\treturn this.setState({value: this.state.max}, callback);\n\t}\n\n\t/**\n\t * Clear min timer\n\t * @private\n\t */\n\t_clearMinTimer() {\n\t\tclearTimeout(this.maxTimer);\n\t\tthis.maxTimer = null;\n\t}\n\n\t/**\n\t * Clear max timer\n\t * @private\n\t */\n\t_clearMaxTimer() {\n\t\tclearTimeout(this.minTimer);\n\t\tthis.minTimer = null;\n\t}\n\n\t/**\n\t * Clear increase timer\n\t * @private\n\t */\n\t_clearIncreaseTimer() {\n\t\tclearTimeout(this.increaseTimer);\n\t\tthis.increaseTimer = null;\n\t}\n\n\t/**\n\t * Clear decrease timer\n\t * @private\n\t */\n\t_clearDecreaseTimer() {\n\t\tclearTimeout(this.decreaseTimer);\n\t\tthis.decreaseTimer = null;\n\t}\n\n\t/**\n\t * Clear on change timers\n\t * @private\n\t */\n\t_clearOnChangeTimers() {\n\t\tthis._clearMaxTimer();\n\t\tthis._clearMinTimer();\n\t}\n\n\t/**\n\t * Clear all timers\n\t * @private\n\t */\n\t_clearTimers() {\n\t\tthis._clearOnChangeTimers();\n\t\tthis._clearIncreaseTimer();\n\t\tthis._clearDecreaseTimer();\n\t}\n\n\t/**\n\t * On increase event\n\t * @param number\n\t */\n\tonIncrease(number) {\n\t\tif (isCallable(this.props.onIncrease)) {\n\t\t\treturn this.props.onIncrease(number);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * On decrease event\n\t * @param number\n\t */\n\tonDecrease(number) {\n\t\tif (isCallable(this.props.onDecrease)) {\n\t\t\treturn this.props.onDecrease(number);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * On max reached event\n\t * @param number\n\t */\n\tonMax(number) {\n\t\tif (isCallable(this.props.onMax)) {\n\t\t\tthis.props.onMax(number);\n\t\t}\n\t\tthis._resetHoldTime();\n\t}\n\n\t/**\n\t * On min reached event\n\t * @param number\n\t */\n\tonMin(number) {\n\t\tif (isCallable(this.props.onMin)) {\n\t\t\tthis.props.onMin(number);\n\t\t}\n\t\tthis._resetHoldTime();\n\t}\n\n\t/**\n\t * On long press event.\n\t * @param number\n\t */\n\tonLongPress(number) {\n\t\tif (isCallable(this.props.onLongPress)) {\n\t\t\tthis.props.onLongPress(number);\n\t\t}\n\t}\n\n\t/**\n\t * On value change\n\t * @param value\n\t * @param isPressEvent\n\t */\n\tasync onChange(value, isPressEvent = false) {\n\t\tconst isEmptyValue = isEmpty(value);\n\t\tthis._clearOnChangeTimers();\n\n\t\tlet num = value;\n\t\tlet parsedNum = value;\n\t\tif (isEmptyValue) {\n\t\t\tnum = this.state.min;\n\t\t}\n\n\t\tif (this.props.disabled) return;\n\n\t\tconst separator = !isEmpty(this.props.decimalSeparator)\n\t\t\t? this.props.decimalSeparator\n\t\t\t: \".\";\n\t\tif (\n\t\t\tString(num).endsWith(separator) &&\n\t\t\t!this.getValue().endsWith(separator + \"0\")\n\t\t) {\n\t\t\tthis.decimalInput = true;\n\t\t}\n\t\tnum = parsedNum = this._parseNum(String(num).replace(/^0+/, \"\")) || 0;\n\t\tif (!this.isMinReached(num)) {\n\t\t\tif (this.isMaxReached(num)) {\n\t\t\t\tif (this.isMaxReached(num)) {\n\t\t\t\t\tparsedNum = this.state.max;\n\t\t\t\t\tif (!isEmptyValue) {\n\t\t\t\t\t\tthis.maxTimer = this._debounceSetMax();\n\t\t\t\t\t}\n\t\t\t\t\tthis.onMax(parsedNum);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isEmptyValue) {\n\t\t\t\tthis.minTimer = this._debounceSetMin();\n\t\t\t}\n\n\t\t\tif (isEmptyValue && this.isEmptied()) {\n\t\t\t\tnum = parsedNum = null;\n\t\t\t} else {\n\t\t\t\tparsedNum = this.state.min;\n\t\t\t}\n\n\t\t\tthis.onMin(parsedNum);\n\t\t}\n\n\t\tif (isEmptyValue && this.isEmptied()) {\n\t\t\tnum = parsedNum = null;\n\t\t} else {\n\t\t\tnum = this._withinRange(num);\n\t\t}\n\n\t\tif (this.state.value !== num && isCallable(this.props.onChange)) {\n\t\t\tconst res = await this.props.onChange(parsedNum);\n\t\t\tif (!isEmptyValue) {\n\t\t\t\tif (res === false) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (isNumeric(res)) {\n\t\t\t\t\tnum = this._parseNum(res);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({value: num});\n\t}\n\n\t/**\n\t * On buttons press out\n\t * @param e\n\t */\n\tonPressOut(e) {\n\t\tthis._resetHoldTime();\n\t}\n\n\t/**\n\t * On Button Press\n\t * @param buttonDirection\n\t */\n\tonShowUnderlay(buttonDirection) {\n\t\tthis.setState({buttonPress: buttonDirection});\n\t}\n\n\t/**\n\t * On Button Unpress\n\t */\n\tonHideUnderlay() {\n\t\tthis.setState({buttonPress: null});\n\t}\n\n\t/**\n\t * On Submit keyboard\n\t * @returns {*}\n\t * @param e\n\t */\n\tonSubmit(e) {\n\t\tif (isCallable(this.props.onSubmit)) {\n\t\t\tthis.props.onSubmit(this._parseNum(e.nativeEvent.text));\n\t\t}\n\t}\n\n\t/**\n\t * On Focus\n\t * @returns {*}\n\t * @param e\n\t */\n\tonFocus(e) {\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(e);\n\t\t}\n\t\tthis.setState({focused: true});\n\t}\n\n\t/**\n\t * On Blur\n\t * @returns {*}\n\t * @param e\n\t */\n\tonBlur(e) {\n\t\tif (this.props.onBlur) {\n\t\t\tthis.props.onBlur(e);\n\t\t}\n\t\tthis.setState({focused: false});\n\t}\n\n\t/**\n\t * On Key Press\n\t * @returns {*}\n\t * @param e\n\t */\n\tonKeyPress(e) {\n\t\tif (this.props.onKeyPress) {\n\t\t\tthis.props.onKeyPress(e);\n\t\t}\n\t}\n\n\t/**\n\t * Round number to props precision\n\t * @private\n\t * @param num\n\t * @returns float|int\n\t */\n\t_roundNum(num) {\n\t\tif (this.isTypeDecimal()) {\n\t\t\tlet val = num * Math.pow(10, this.props.precision);\n\t\t\tlet fraction = Math.round((val - parseInt(val)) * 10) / 10;\n\t\t\tif (fraction === -0.5) {\n\t\t\t\tfraction = -0.6;\n\t\t\t}\n\t\t\tval =\n\t\t\t\tMath.round(parseInt(val) + fraction) /\n\t\t\t\tMath.pow(10, this.props.precision);\n\t\t\treturn val;\n\t\t}\n\t\treturn num;\n\t}\n\n\t/**\n\t * Limit value to be within max and min range\n\t * @private\n\t * @param value\n\t * @param min\n\t * @param max\n\t * @returns float|int\n\t */\n\t_withinRange(value, min = null, max = null) {\n\t\tif (min == null && this.state && this.state.min != null) {\n\t\t\tmin = this.state.min;\n\t\t}\n\t\tif (max == null && this.state && this.state.max != null) {\n\t\t\tmax = this.state.max;\n\t\t}\n\t\tif (min != null && value < min) {\n\t\t\tvalue = min;\n\t\t}\n\t\tif (max != null && value > max) {\n\t\t\tvalue = max;\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Parse number type\n\t * @private\n\t * @param num\n\t * @returns float|int\n\t */\n\t_parseNum(num) {\n\t\tnum = String(num).replace(\n\t\t\t!isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\",\n\t\t\t\".\",\n\t\t);\n\t\tif (this.isTypeDecimal()) {\n\t\t\tnum = parseFloat(num);\n\t\t} else {\n\t\t\tnum = parseInt(num);\n\t\t}\n\t\tif (isNaN(num)) {\n\t\t\tnum = 0;\n\t\t}\n\t\tthis._roundNum(num);\n\t\treturn num;\n\t}\n\n\t/**\n\t * Convert value to string\n\t * @returns {string}\n\t */\n\tgetValue() {\n\t\tlet value = this.state.value;\n\t\tif (isEmpty(value)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (this.isTypeDecimal() && this.decimalInput) {\n\t\t\tthis.decimalInput = false;\n\t\t\tvalue = this._parseNum(value).toFixed(1).replace(/0+$/, \"\");\n\t\t} else if (this.isTypeDecimal()) {\n\t\t\tvalue = String(\n\t\t\t\tthis._parseNum(this._parseNum(value).toFixed(this.props.precision)),\n\t\t\t);\n\t\t} else {\n\t\t\tvalue = String(this._parseNum(value));\n\t\t}\n\t\tlet hasPlaceholder = value === \"0\" && !isEmpty(this.props.placeholder);\n\t\treturn hasPlaceholder\n\t\t\t? \"\"\n\t\t\t: value.replace(\n\t\t\t\t\t\".\",\n\t\t\t\t\t!isEmpty(this.props.decimalSeparator)\n\t\t\t\t\t\t? this.props.decimalSeparator\n\t\t\t\t\t\t: \".\",\n\t\t\t  );\n\t}\n\n\t/**\n\t * Get Placeholder\n\t * @returns {*}\n\t */\n\tgetPlaceholder() {\n\t\tif (!isEmpty(this.props.placeholder)) {\n\t\t\treturn this.props.placeholder;\n\t\t} else if (isEmpty(this.state.value) && this.isEmptied()) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn String(this.state.min);\n\t\t}\n\t}\n\n\t/**\n\t * Get Placeholder\n\t * @returns {*}\n\t */\n\tgetPlaceholderColor() {\n\t\tif (this.props.placeholderTextColor) {\n\t\t\treturn this.props.placeholderTextColor;\n\t\t}\n\t\tlet textColor = this._getInputTextColor();\n\t\tlet parse = parseColor(textColor);\n\t\tparse[3] = Math.round(0.6 * 255);\n\n\t\treturn colorsToHex(parse);\n\t}\n\n\t/**\n\t * Get Type\n\t * @returns {String}\n\t */\n\tgetType() {\n\t\tlet type = this.props.type;\n\t\tif (this.props.type != null) {\n\t\t\ttype = this.props.type;\n\t\t}\n\t\treturn String(type).toLowerCase();\n\t}\n\n\t/**\n\t * Detect if type is decimal\n\t * @returns {boolean}\n\t */\n\tisTypeDecimal() {\n\t\tlet type = this.getType();\n\t\treturn (\n\t\t\ttype === \"float\" ||\n\t\t\ttype === \"double\" ||\n\t\t\ttype === \"decimal\" ||\n\t\t\ttype === \"real\"\n\t\t);\n\t}\n\n\t/**\n\t * Update holding time\n\t * @private\n\t */\n\t_startHoldTime() {\n\t\tthis.holdTime = new Date().getTime();\n\t}\n\n\t/**\n\t * Get the holding time\n\t * @private\n\t */\n\t_getHoldTime() {\n\t\tif (isEmpty(this.holdTime)) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet now = new Date().getTime();\n\t\treturn now - this.holdTime;\n\t}\n\n\t/**\n\t * Reset holding time\n\t * @private\n\t */\n\t_resetHoldTime() {\n\t\tthis.holdTime = null;\n\t\tthis._clearTimers();\n\t}\n\n\t/**\n\t * Find the interval between changing values after a button has been held for a certain amount of time\n\t * @returns {number}\n\t * @author Tom Hardern <https://gist.github.com/taeh98/f709451457400818094d802cd33694d5>\n\t * @private\n\t */\n\t_getHoldChangeInterval() {\n\t\tconst minInterval = 10;\n\t\tvar time = (10 - Math.log(this.props.speed * this._getHoldTime())) * 100;\n\t\treturn time < minInterval ? minInterval : time;\n\t}\n\n\t/**\n\t * On hold increase\n\t * @param event\n\t * @returns {Promise<void>}\n\t */\n\tasync increaseHold(event) {\n\t\tthis.increase(event, true);\n\t}\n\n\t/**\n\t * Increase\n\t * @param event\n\t * @param isLongPress\n\t * @returns {Promise<void>}\n\t */\n\tasync increase(event, isLongPress = false) {\n\t\tif (this._isDisabledButtonRight()) return;\n\t\tlet currentValue = this._parseNum(this.state.value);\n\t\tlet num =\n\t\t\tcurrentValue +\n\t\t\tthis._parseNum(\n\t\t\t\tisLongPress && this.state.longStep > 0\n\t\t\t\t\t? this.state.longStep\n\t\t\t\t\t: this.state.step,\n\t\t\t);\n\t\tif (isLongPress && this.state.longStep > 0) {\n\t\t\tnum = Math.round(num / this.state.longStep) * this.state.longStep;\n\t\t}\n\t\tif (this.isTypeDecimal()) {\n\t\t\tnum = Number(num.toFixed(this.props.precision));\n\t\t}\n\n\t\tif (\n\t\t\tthis.isMaxReached(currentValue) &&\n\t\t\t!this.isEmptied() &&\n\t\t\tthis.isContinuos()\n\t\t) {\n\t\t\t// Continuity mode\n\t\t\tnum = this.state.min;\n\t\t} else if (this.isMaxReached(currentValue)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst res = await this.onIncrease(num);\n\t\tif (res === false) {\n\t\t\treturn;\n\t\t} else if (isNumeric(res)) {\n\t\t\tnum = this._parseNum(res);\n\t\t}\n\n\t\tlet wait = this._getHoldChangeInterval();\n\t\tif (!isLongPress && this.increaseTimer === null) {\n\t\t\tthis._startHoldTime();\n\t\t\twait = this.props.accelerationDelay;\n\t\t} else if (isLongPress) {\n\t\t\tthis.onLongPress(num);\n\t\t}\n\n\t\tif (isLongPress) {\n\t\t\tthis.increaseTimer = setTimeout(\n\t\t\t\tthis.increase.bind(this, event, true),\n\t\t\t\twait,\n\t\t\t);\n\t\t}\n\n\t\tthis.onChange(num, true);\n\t}\n\n\t/**\n\t * On hold decrease\n\t * @param event\n\t * @returns {Promise<void>}\n\t */\n\tasync decreaseHold(event) {\n\t\tthis.decrease(event, true);\n\t}\n\n\t/**\n\t * Decrease\n\t * @param event\n\t * @param isLongPress\n\t * @returns {Promise<void>}\n\t */\n\tasync decrease(event, isLongPress = false) {\n\t\tif (this._isDisabledButtonLeft()) return;\n\t\tlet currentValue = this._parseNum(this.state.value);\n\t\tlet num =\n\t\t\tcurrentValue -\n\t\t\tthis._parseNum(\n\t\t\t\tisLongPress && this.state.longStep > 0\n\t\t\t\t\t? this.state.longStep\n\t\t\t\t\t: this.state.step,\n\t\t\t);\n\t\tif (isLongPress && this.state.longStep > 0) {\n\t\t\tnum = Math.round(num / this.state.longStep) * this.state.longStep;\n\t\t}\n\t\tif (this.isTypeDecimal()) {\n\t\t\tnum = Number(num.toFixed(this.props.precision));\n\t\t}\n\n\t\tif (\n\t\t\tthis.isMinReached(currentValue) &&\n\t\t\t!this.isEmptied() &&\n\t\t\tthis.isContinuos()\n\t\t) {\n\t\t\t// Continuity mode\n\t\t\tnum = this.state.max;\n\t\t} else if (this.isMinReached(currentValue)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst res = await this.onDecrease(num);\n\t\tif (res === false) {\n\t\t\treturn;\n\t\t} else if (isNumeric(res)) {\n\t\t\tnum = this._parseNum(res);\n\t\t}\n\n\t\tlet wait = this._getHoldChangeInterval();\n\t\tif (!isLongPress && this.decreaseTimer === null) {\n\t\t\tthis._startHoldTime();\n\t\t\twait = this.props.accelerationDelay;\n\t\t} else if (isLongPress) {\n\t\t\tthis.onLongPress(num);\n\t\t}\n\n\t\tif (isLongPress) {\n\t\t\tthis.decreaseTimer = setTimeout(\n\t\t\t\tthis.decrease.bind(this, event, true),\n\t\t\t\twait,\n\t\t\t);\n\t\t}\n\n\t\tthis.onChange(num, true);\n\t}\n\n\t/**\n\t * Max is reached\n\t * @param num\n\t * @returns {boolean}\n\t */\n\tisMaxReached(num = null) {\n\t\tif (this.state.max != null) {\n\t\t\tif (num == null) {\n\t\t\t\tnum = this.state.value;\n\t\t\t}\n\t\t\treturn num >= this.state.max;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Min is reached\n\t * @param num\n\t * @returns {boolean}\n\t */\n\tisMinReached(num = null) {\n\t\tif (this.state.min != null) {\n\t\t\tif (num == null) {\n\t\t\t\tnum = this.state.value;\n\t\t\t}\n\t\t\treturn num <= this.state.min;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Blur\n\t */\n\tblur() {\n\t\tthis.textInput.blur();\n\t}\n\n\t/**\n\t * Focus\n\t */\n\tfocus() {\n\t\tthis.textInput.focus();\n\t}\n\n\t/**\n\t * Clear\n\t */\n\tclear() {\n\t\tthis.textInput.clear();\n\t}\n\n\t/**\n\t * Is text input editable\n\t * @returns {boolean|Boolean}\n\t */\n\tisEditable() {\n\t\treturn (\n\t\t\t(this.props.disabled !== true || this.props.disabled != null) &&\n\t\t\tthis.props.editable !== false\n\t\t);\n\t}\n\n\t/**\n\t * If continuity mode enabled\n\t * @returns {boolean|Boolean}\n\t */\n\tisContinuos() {\n\t\treturn this.props.continuity !== false;\n\t}\n\n\t/**\n\t * If input can be empty\n\t * @returns {boolean|Boolean}\n\t */\n\tisEmptied() {\n\t\treturn this.props.emptied !== false;\n\t}\n\n\t/**\n\t * Is text input focused\n\t * @returns {boolean|Boolean}\n\t */\n\tisFocused() {\n\t\treturn this.state.focus !== false;\n\t}\n\n\t/**\n\t * Is left button disabled\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isDisabledButtonLeft() {\n\t\treturn (\n\t\t\tthis.props.disabled !== false || this.props.buttonLeftDisabled !== false\n\t\t);\n\t}\n\n\t/**\n\t * Is right button disabled\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isDisabledButtonRight() {\n\t\treturn (\n\t\t\tthis.props.disabled !== false || this.props.buttonRightDisabled !== false\n\t\t);\n\t}\n\n\t/**\n\t * Is right button pressed\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isRightButtonPressed() {\n\t\treturn this.state.buttonPress === \"right\";\n\t}\n\n\t/**\n\t * Is left button pressed\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isLeftButtonPressed() {\n\t\treturn this.state.buttonPress === \"left\";\n\t}\n\n\t/**\n\t * Get keyboard type\n\t * @returns {string}\n\t * @private\n\t */\n\t_getKeyboardType() {\n\t\t// Keyboard type\n\t\tlet keyboardType = \"number-pad\";\n\t\tif (this.isTypeDecimal()) {\n\t\t\tkeyboardType = \"decimal-pad\";\n\t\t}\n\t\treturn keyboardType;\n\t}\n\n\t/**\n\t * Get auto capitalize\n\t * @returns {string}\n\t * @private\n\t */\n\t_getAutoCapitalize() {\n\t\tlet autoCapitalize = this.props.autoCapitalize\n\t\t\t? this.props.autoCapitalize\n\t\t\t: \"none\";\n\t\tif (this.isTypeDecimal()) {\n\t\t\tautoCapitalize = \"words\";\n\t\t}\n\t\treturn autoCapitalize;\n\t}\n\n\t/**\n\t * Get main color\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getMainColor() {\n\t\tlet color = this.props.color;\n\t\tif (this.props.colorAsBackground) {\n\t\t\tcolor = defaultTransparent;\n\t\t} else if (isTransparentColor(color)) {\n\t\t\tcolor = defaultTransparent;\n\t\t}\n\n\t\treturn color;\n\t}\n\n\t/**\n\t * Get button color\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getColor() {\n\t\tconst color = this._getMainColor();\n\n\t\treturn this.isMaxReached()\n\t\t\t? this._getColorMax()\n\t\t\t: this.isMinReached()\n\t\t\t? this._getColorMin()\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get min color\n\t * @returns {String}\n\t * @private\n\t */\n\t_getColorMin() {\n\t\tif (!this.props.colorMin) {\n\t\t\treturn this.props.color;\n\t\t}\n\t\treturn this.props.colorMin;\n\t}\n\n\t/**\n\t * Get max color\n\t * @returns {String}\n\t * @private\n\t */\n\t_getColorMax() {\n\t\tif (!this.props.colorMax) {\n\t\t\treturn this.props.color;\n\t\t}\n\t\treturn this.props.colorMax;\n\t}\n\n\t/**\n\t * Get color on button press\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getColorPress() {\n\t\tconst color = this.props.colorAsBackground\n\t\t\t? defaultTransparent\n\t\t\t: this.props.color;\n\t\treturn this.props.colorPress !== defaultColor\n\t\t\t? this.props.colorPress\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get color text on button press\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorPressText() {\n\t\tconst color = this.props.colorAsBackground\n\t\t\t? this._getColorBackground()\n\t\t\t: this._getColorPress();\n\t\tconst pressColor = this.props.buttonPressTextColor\n\t\t\t? this.props.buttonPressTextColor\n\t\t\t: this._getColorText();\n\t\tlet textColor =\n\t\t\tthis.props.buttonPressTextColor !== this.props.buttonTextColor\n\t\t\t\t? pressColor\n\t\t\t\t: \"auto\";\n\t\tif (String(textColor).toLowerCase().trim() === \"auto\") {\n\t\t\ttextColor = getColorContrast(color);\n\t\t}\n\n\t\treturn textColor;\n\t}\n\n\t/**\n\t * Get color text on button\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorText() {\n\t\tconst color = this.props.colorAsBackground\n\t\t\t? this._getColorBackground()\n\t\t\t: this._getColor();\n\t\tlet textColor =\n\t\t\tthis._getColor() !== this._getMainColor()\n\t\t\t\t? \"auto\"\n\t\t\t\t: this.props.buttonTextColor\n\t\t\t\t? this.props.buttonTextColor\n\t\t\t\t: \"auto\";\n\t\tif (String(textColor).toLowerCase().trim() === \"auto\") {\n\t\t\ttextColor = getColorContrast(color);\n\t\t}\n\n\t\treturn textColor;\n\t}\n\n\t/**\n\t * Get left button color\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorLeftButton() {\n\t\tconst color = this._getColor();\n\t\treturn this.props.colorLeft !== defaultColor ? this.props.colorLeft : color;\n\t}\n\n\t/**\n\t * Get right button color\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorRightButton() {\n\t\tconst color = this._getColor();\n\t\treturn this.props.colorRight !== defaultColor\n\t\t\t? this.props.colorRight\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get background color\n\t * @returns {string|*}\n\t * @private\n\t */\n\t_getColorBackground() {\n\t\tlet color = this.props.color;\n\t\tlet background = this.props.background;\n\t\tif (isTransparentColor(color)) {\n\t\t\tcolor = defaultTransparent;\n\t\t}\n\t\tif (isTransparentColor(background)) {\n\t\t\tbackground = defaultTransparent;\n\t\t}\n\t\treturn this.props.colorAsBackground\n\t\t\t? this.isMaxReached()\n\t\t\t\t? this._getColorMax()\n\t\t\t\t: this.isMinReached()\n\t\t\t\t? this._getColorMin()\n\t\t\t\t: color\n\t\t\t: background;\n\t}\n\n\t/**\n\t * Get container style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getContainerStyle() {\n\t\tconst backgroundColor = this._getColorBackground();\n\t\treturn [\n\t\t\tStyle.container,\n\t\t\t{\n\t\t\t\tminHeight: this.props.height,\n\t\t\t\twidth: this.props.width,\n\t\t\t\tbackgroundColor: backgroundColor,\n\t\t\t},\n\t\t\tthis.props.showBorder\n\t\t\t\t? {borderWidth: 0.5, borderColor: this._getColor()}\n\t\t\t\t: {},\n\t\t\tthis.props.shadow ? Style.containerShadow : {},\n\t\t\tthis.props.rounded ? {borderRadius: this.props.height / 2} : {},\n\t\t\tthis.props.style,\n\t\t];\n\t}\n\n\t/**\n\t * Get input text color\n\t * @returns {string|*}\n\t * @private\n\t */\n\t_getInputTextColor() {\n\t\tconst backgroundColor = this._getColorBackground();\n\t\treturn this.props.textColor\n\t\t\t? this.props.textColor\n\t\t\t: getColorContrast(backgroundColor);\n\t}\n\n\t/**\n\t * Get input text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getInputTextStyle() {\n\t\tconst backgroundColor = this._getColorBackground();\n\t\treturn [\n\t\t\tStyle.numberText,\n\t\t\t{\n\t\t\t\tcolor: this._getInputTextColor(),\n\t\t\t\tfontSize: this.props.fontSize,\n\t\t\t\tfontFamily: this.props.fontFamily,\n\t\t\t\tbackgroundColor: backgroundColor,\n\t\t\t\theight: this.props.height,\n\t\t\t},\n\t\t\tthis.props.showBorder\n\t\t\t\t? {borderWidth: 0.5, borderColor: this._getColor()}\n\t\t\t\t: {},\n\t\t\tthis.props.inputStyle,\n\t\t];\n\t}\n\n\t/**\n\t * Get button style\n\t * @returns {*}\n\t * @private\n\t */\n\t_getStyleButton() {\n\t\tconst size = this.props.height;\n\t\treturn {\n\t\t\theight: size,\n\t\t\twidth: size,\n\t\t};\n\t}\n\n\t/**\n\t * Get button pressed style\n\t * @returns {Object}\n\t * @private\n\t */\n\t_getStyleButtonPress() {\n\t\treturn isEmpty(this.props.buttonPressStyle)\n\t\t\t? this.props.buttonStyle\n\t\t\t: this.props.buttonPressStyle;\n\t}\n\n\t/**\n\t * Get button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\t{\n\t\t\t\tfontSize: this.props.buttonFontSize,\n\t\t\t\tfontFamily: this.props.buttonFontFamily,\n\t\t\t\tlineHeight: this.props.height,\n\t\t\t},\n\t\t\tthis.props.buttonTextStyle ? this.props.buttonTextStyle : {},\n\t\t];\n\t}\n\n\t/**\n\t * Get left button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleLeftButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\tthis._getStyleButtonText(),\n\t\t\t{\n\t\t\t\tcolor: this._isLeftButtonPressed()\n\t\t\t\t\t? this._getColorPressText()\n\t\t\t\t\t: this._getColorText(),\n\t\t\t},\n\t\t\tthis._isLeftButtonPressed() ? this.props.buttonPressTextStyle : {},\n\t\t];\n\t}\n\n\t/**\n\t * Get right button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleRightButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\tthis._getStyleButtonText(),\n\t\t\t{\n\t\t\t\tcolor: this._isRightButtonPressed()\n\t\t\t\t\t? this._getColorPressText()\n\t\t\t\t\t: this._getColorText(),\n\t\t\t},\n\t\t\tthis._isRightButtonPressed() ? this.props.buttonPressTextStyle : {},\n\t\t];\n\t}\n\n\t/**\n\t * Render left button element\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderLeftButtonElement() {\n\t\tif (this.props.buttonLeftImage) {\n\t\t\treturn this.props.buttonLeftImage;\n\t\t} else if (this._isLeftButtonPressed() && this.props.buttonPressLeftImage) {\n\t\t\treturn this.props.buttonPressLeftImage;\n\t\t} else {\n\t\t\tconst text =\n\t\t\t\tthis.props.arrows !== false\n\t\t\t\t\t? \"❮\"\n\t\t\t\t\t: this.props.buttonLeftText\n\t\t\t\t\t? this.props.buttonLeftText\n\t\t\t\t\t: \"-\";\n\t\t\treturn <Text {...this.props.buttonTextProps} style={this._getStyleLeftButtonText()}>{text}</Text>;\n\t\t}\n\t}\n\n\t/**\n\t * Render right button element\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderRightButtonElement() {\n\t\tif (this.props.buttonRightImage) {\n\t\t\treturn this.props.buttonRightImage;\n\t\t} else if (\n\t\t\tthis._isRightButtonPressed() &&\n\t\t\tthis.props.buttonPressRightImage\n\t\t) {\n\t\t\treturn this.props.buttonPressRightImage;\n\t\t} else {\n\t\t\tconst text =\n\t\t\t\tthis.props.arrows !== false\n\t\t\t\t\t? \"❯\"\n\t\t\t\t\t: this.props.buttonRightText\n\t\t\t\t\t? this.props.buttonRightText\n\t\t\t\t\t: \"+\";\n\t\t\treturn <Text {...this.props.buttonTextProps} style={this._getStyleRightButtonText()}>{text}</Text>;\n\t\t}\n\t}\n\n\t/**\n\t * Render left button\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderLeftButton() {\n\t\tconst colorLeft = this._getColorLeftButton();\n\n\t\tconst buttonStyle = mergeViewStyle(\n\t\t\tthis._isLeftButtonPressed()\n\t\t\t\t? this._getStyleButtonPress()\n\t\t\t\t: this.props.buttonStyle,\n\t\t\t[\n\t\t\t\tthis._getStyleButton(),\n\t\t\t\t{\n\t\t\t\t\tborderColor: this.props.showBorder ? colorLeft : \"transparent\",\n\t\t\t\t\tbackgroundColor: colorLeft,\n\t\t\t\t},\n\t\t\t\tthis.props.rounded ? Style.buttonRounded : Style.buttonLeft,\n\t\t\t],\n\t\t);\n\n\t\treturn (\n\t\t\t<TouchableHighlight\n\t\t\t\tactiveOpacity={this.props.activeOpacity}\n\t\t\t\tunderlayColor={this._getColorPress()}\n\t\t\t\tonHideUnderlay={this.onHideUnderlay.bind(this)}\n\t\t\t\tonShowUnderlay={this.onShowUnderlay.bind(this, \"left\")}\n\t\t\t\tdisabled={this._isDisabledButtonLeft()}\n\t\t\t\tstyle={buttonStyle}\n\t\t\t\tonPressIn={this.decrease.bind(this)}\n\t\t\t\tonPressOut={this.onPressOut.bind(this)}\n\t\t\t\tonLongPress={this.decreaseHold.bind(this)}\n\t\t\t\tdelayLongPress={this.props.accelerationDelay}\n\t\t\t\t{...this.props.leftButtonProps}>\n\t\t\t\t{this._renderLeftButtonElement()}\n\t\t\t</TouchableHighlight>\n\t\t);\n\t}\n\n\t/**\n\t * Render right button\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderRightButton() {\n\t\tconst colorRight = this._getColorRightButton();\n\n\t\tconst buttonStyle = mergeViewStyle(\n\t\t\tthis._isRightButtonPressed()\n\t\t\t\t? this._getStyleButtonPress()\n\t\t\t\t: this.props.buttonStyle,\n\t\t\t[\n\t\t\t\tthis._getStyleButton(),\n\t\t\t\t{\n\t\t\t\t\tborderColor: this.props.showBorder ? colorRight : \"transparent\",\n\t\t\t\t\tbackgroundColor: colorRight,\n\t\t\t\t},\n\t\t\t\tthis.props.rounded ? Style.buttonRounded : Style.buttonRight,\n\t\t\t],\n\t\t);\n\n\t\treturn (\n\t\t\t<TouchableHighlight\n\t\t\t\tactiveOpacity={this.props.activeOpacity}\n\t\t\t\tunderlayColor={this._getColorPress()}\n\t\t\t\tonHideUnderlay={this.onHideUnderlay.bind(this)}\n\t\t\t\tonShowUnderlay={this.onShowUnderlay.bind(this, \"right\")}\n\t\t\t\tdisabled={this._isDisabledButtonRight()}\n\t\t\t\tstyle={buttonStyle}\n\t\t\t\tonPressIn={this.increase.bind(this)}\n\t\t\t\tonPressOut={this.onPressOut.bind(this)}\n\t\t\t\tonLongPress={this.increaseHold.bind(this)}\n\t\t\t\tdelayLongPress={this.props.accelerationDelay}\n\t\t\t\t{...this.props.rightButtonProps}>\n\t\t\t\t{this._renderRightButtonElement()}\n\t\t\t</TouchableHighlight>\n\t\t);\n\t}\n\n\t/**\n\t * Render\n\t * @returns {*}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<View style={this._getContainerStyle()} {...this.props.containerProps}>\n\t\t\t\t{this._renderLeftButton()}\n\n\t\t\t\t{this.props.prepend}\n\n\t\t\t\t<TextInput\n\t\t\t\t\tref={(input) => (this.textInput = input)}\n\t\t\t\t\tstyle={this._getInputTextStyle()}\n\t\t\t\t\tvalue={this.getValue()}\n\t\t\t\t\tplaceholder={this.getPlaceholder()}\n\t\t\t\t\tplaceholderTextColor={this.getPlaceholderColor()}\n\t\t\t\t\tselectionColor={this.props.selectionColor}\n\t\t\t\t\tselectTextOnFocus={this.props.selectTextOnFocus}\n\t\t\t\t\treturnKeyType={this.props.returnKeyType}\n\t\t\t\t\treturnKeyLabel={this.props.returnKeyLabel}\n\t\t\t\t\tautoFocus={this.props.autoFocus}\n\t\t\t\t\tautoCapitalize={this._getAutoCapitalize()} // Bug fix for Samsung Keyboard\n\t\t\t\t\teditable={this.isEditable()}\n\t\t\t\t\tmaxLength={this.props.maxLength}\n\t\t\t\t\tonKeyPress={this.onKeyPress.bind(this)}\n\t\t\t\t\tonFocus={this.onFocus.bind(this)}\n\t\t\t\t\tonBlur={this.onBlur.bind(this)}\n\t\t\t\t\tkeyboardType={this._getKeyboardType()}\n\t\t\t\t\tonChangeText={this.onChange.bind(this)}\n\t\t\t\t\tonSubmitEditing={this.onSubmit.bind(this)}\n\t\t\t\t\t{...this.props.inputProps}\n\t\t\t\t/>\n\n\t\t\t\t{this.props.children}\n\t\t\t\t{this.props.append}\n\n\t\t\t\t{this._renderRightButton()}\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nInputSpinner.propTypes = {\n\ttype: PropTypes.string,\n\tskin: PropTypes.string,\n\tmin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tmax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tinitialValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tstep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tlongStep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tprecision: PropTypes.number,\n\tshadow: PropTypes.bool,\n\trounded: PropTypes.bool,\n\tactiveOpacity: PropTypes.number,\n\tcolor: PropTypes.string,\n\tcolorPress: PropTypes.string,\n\tcolorRight: PropTypes.string,\n\tcolorLeft: PropTypes.string,\n\tcolorMax: PropTypes.string,\n\tcolorMin: PropTypes.string,\n\tcolorAsBackground: PropTypes.bool,\n\tbackground: PropTypes.string,\n\ttextColor: PropTypes.string,\n\tarrows: PropTypes.bool,\n\tshowBorder: PropTypes.bool,\n\tfontSize: PropTypes.number,\n\tfontFamily: PropTypes.string,\n\tbuttonFontSize: PropTypes.number,\n\tbuttonFontFamily: PropTypes.string,\n\tbuttonTextColor: PropTypes.string,\n\tmaxLength: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\teditable: PropTypes.bool,\n\tautoFocus: PropTypes.bool,\n\tselectTextOnFocus: PropTypes.bool,\n\tplaceholder: PropTypes.string,\n\tplaceholderTextColor: PropTypes.string,\n\tselectionColor: PropTypes.string,\n\treturnKeyLabel: PropTypes.string,\n\treturnKeyType: PropTypes.string,\n\twidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\theight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tonChange: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonBlur: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonMin: PropTypes.func,\n\tonMax: PropTypes.func,\n\tonIncrease: PropTypes.func,\n\tonDecrease: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\tonLongPress: PropTypes.func,\n\taccelerationDelay: PropTypes.number,\n\tspeed: PropTypes.number,\n\temptied: PropTypes.bool,\n\tcontinuity: PropTypes.bool,\n\ttypingTime: PropTypes.number,\n\tbuttonLeftDisabled: PropTypes.bool,\n\tbuttonRightDisabled: PropTypes.bool,\n\tbuttonLeftText: PropTypes.string,\n\tbuttonRightText: PropTypes.string,\n\tbuttonLeftImage: PropTypes.element,\n\tbuttonRightImage: PropTypes.element,\n\tbuttonPressLeftImage: PropTypes.element,\n\tbuttonPressRightImage: PropTypes.element,\n\tbuttonStyle: PropTypes.oneOfType([\n\t\tPropTypes.object,\n\t\tPropTypes.array,\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]),\n\tbuttonTextStyle: PropTypes.oneOfType([\n\t\tPropTypes.object,\n\t\tPropTypes.array,\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]),\n\tbuttonPressStyle: PropTypes.oneOfType([\n\t\tPropTypes.object,\n\t\tPropTypes.array,\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]),\n\tbuttonPressTextStyle: PropTypes.oneOfType([\n\t\tPropTypes.object,\n\t\tPropTypes.array,\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]),\n\tinputStyle: PropTypes.oneOfType([\n\t\tPropTypes.object,\n\t\tPropTypes.array,\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]),\n\tstyle: PropTypes.oneOfType([\n\t\tPropTypes.object,\n\t\tPropTypes.array,\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]),\n\tappend: PropTypes.element,\n\tprepend: PropTypes.element,\n\tdecimalSeparator: PropTypes.string,\n\tcontainerProps: PropTypes.object,\n\tinputProps: PropTypes.object,\n\tleftButtonProps: PropTypes.object,\n\trightButtonProps: PropTypes.object,\n\tbuttonTextProps: PropTypes.object,\n};\n\nInputSpinner.defaultProps = {\n\ttype: \"int\",\n\tskin: null,\n\tmin: 0,\n\tmax: null,\n\tvalue: 0,\n\tinitialValue: null,\n\tstep: 1,\n\tlongStep: 0,\n\tprecision: 2,\n\trounded: true,\n\tshadow: false,\n\tactiveOpacity: 0.85,\n\tcolor: defaultColor,\n\tcolorPress: defaultColor,\n\tcolorRight: defaultColor,\n\tcolorLeft: defaultColor,\n\tcolorAsBackground: false,\n\tbackground: \"transparent\",\n\ttextColor: null,\n\tarrows: false,\n\tshowBorder: false,\n\tfontSize: 14,\n\tfontFamily: defaultFont,\n\tbuttonFontSize: 25,\n\tbuttonFontFamily: defaultFont,\n\tbuttonTextColor: null,\n\tbuttonPressTextColor: null,\n\tmaxLength: null,\n\tdisabled: false,\n\teditable: true,\n\tautoFocus: false,\n\tselectTextOnFocus: null,\n\tselectionColor: null,\n\treturnKeyLabel: null,\n\treturnKeyType: null,\n\twidth: \"auto\",\n\theight: 50,\n\taccelerationDelay: defaultAccelerationDelay,\n\tspeed: defaultSpeed,\n\temptied: false,\n\tcontinuity: false,\n\ttypingTime: defaultTypingTime,\n\tbuttonLeftDisabled: false,\n\tbuttonRightDisabled: false,\n\tbuttonLeftText: null,\n\tbuttonRightText: null,\n\tbuttonStyle: null,\n\tbuttonTextStyle: null,\n\tbuttonPressStyle: null,\n\tbuttonPressTextStyle: null,\n\tinputStyle: null,\n\tstyle: null,\n\tdecimalSeparator: \".\",\n\tcontainerProps: null,\n\tinputProps: null,\n\tleftButtonProps: null,\n\trightButtonProps: null,\n\tbuttonTextProps: null,\n};\n\nexport default InputSpinner;\n"]},"metadata":{},"sourceType":"module"}