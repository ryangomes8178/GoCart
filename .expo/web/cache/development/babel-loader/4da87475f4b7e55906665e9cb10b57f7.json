{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"name\", \"maskProps\", \"refInput\", \"onChange\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { TextInputMask } from 'react-native-masked-text';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nvar CardInput = function CardInput(_ref) {\n  var name = _ref.name,\n      maskProps = _ref.maskProps,\n      _refInput = _ref.refInput,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var handleChange = React.useCallback(function (text) {\n    var value = text.toUpperCase();\n    return onChange(name, value);\n  }, [name, onChange]);\n\n  var setRef = function setRef(inputRef, ref) {\n    if (typeof ref === 'object') {\n      ref.current = inputRef;\n    }\n  };\n\n  var InputComponent = maskProps ? TextInputMask : TextInput;\n  var customProps = maskProps ? {\n    refInput: function refInput(ref) {\n      return setRef(ref, _refInput);\n    }\n  } : {\n    ref: _refInput\n  };\n  return React.createElement(InputComponent, _extends({\n    style: style,\n    onChangeText: handleChange,\n    hitSlop: {\n      top: 10,\n      bottom: 10,\n      left: 0,\n      right: 0\n    }\n  }, maskProps, props, customProps));\n};\n\nexport default CardInput;","map":{"version":3,"sources":["CardInput.tsx"],"names":["CardInput","onChange","props","handleChange","text","value","setRef","ref","InputComponent","maskProps","customProps","refInput","top","bottom","left","right"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,0BAAA;;;AAWA,IAAMA,SAAc,GAAG,SAAjBA,SAAiB,OAOD;AAAA,MAPE,IAOF,QAPE,IAOF;AAAA,MAPE,SAOF,QAPE,SAOF;AAAA,MAPE,SAOF,QAPE,QAOF;AAAA,2BAHpBC,QAGoB;AAAA,MAHpBA,QAGoB,8BAHT,YAAM,CAJK,CAOF;AAAA,MAPE,KAOF,QAPE,KAOF;AAAA,MADjBC,KACiB;;AACpB,MAAMC,YAAY,GAAG,KAAK,CAAL,WAAA,CAClBC,UAAAA,IAAD,EAAU;AACR,QAAMC,KAAK,GAAGD,IAAI,CAAlB,WAAcA,EAAd;AACA,WAAOH,QAAQ,CAAA,IAAA,EAAf,KAAe,CAAf;AAHiB,GAAA,EAKnB,CAAA,IAAA,EALF,QAKE,CALmB,CAArB;;AAQA,MAAMK,MAAM,GAAG,SAATA,MAAS,CAAA,QAAA,EAAA,GAAA,EAA6B;AAC1C,QAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3BC,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,QAAAA;AACD;AAHH,GAAA;;AAMA,MAAMC,cAAmB,GAAGC,SAAS,GAAA,aAAA,GAArC,SAAA;AACA,MAAMC,WAAW,GAAGD,SAAS,GACzB;AAAEE,IAAAA,QAAQ,EAAGJ,kBAAAA,GAAD;AAAA,aAAcD,MAAM,CAAA,GAAA,EAAA,SAAA,CAApB;AAAA;AAAZ,GADyB,GAEzB;AAAEC,IAAAA,GAAG,EAAEI;AAAP,GAFJ;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,YAAY,EAFd,YAAA;AAGE,IAAA,OAAO,EAAE;AAAEC,MAAAA,GAAG,EAAL,EAAA;AAAWC,MAAAA,MAAM,EAAjB,EAAA;AAAuBC,MAAAA,IAAI,EAA3B,CAAA;AAAgCC,MAAAA,KAAK,EAAE;AAAvC;AAHX,GAAA,EAAA,SAAA,EAAA,KAAA,EADF,WACE,CAAA,CADF;AA3BF,CAAA;;AAuCA,eAAA,SAAA","sourcesContent":["import React from 'react';\nimport { TextInputMask, TextInputMaskProps } from 'react-native-masked-text';\nimport { TextInputProps, TextInput } from 'react-native';\n\nexport type CardInputProps = {\n  name: string;\n  onChange: (name: string, text: string) => void | null;\n  maskProps: TextInputMaskProps;\n  placeholderTextColor: string;\n  refInput: React.MutableRefObject<any>;\n} & TextInputProps;\n\nconst CardInput: any = ({\n  name,\n  maskProps,\n  refInput,\n  onChange = () => {},\n  style,\n  ...props\n}: CardInputProps) => {\n  const handleChange = React.useCallback(\n    (text) => {\n      const value = text.toUpperCase();\n      return onChange(name, value);\n    },\n    [name, onChange]\n  );\n\n  const setRef = (inputRef: any, ref: any) => {\n    if (typeof ref === 'object') {\n      ref.current = inputRef;\n    }\n  };\n\n  const InputComponent: any = maskProps ? TextInputMask : TextInput;\n  const customProps = maskProps\n    ? { refInput: (ref: any) => setRef(ref, refInput) }\n    : { ref: refInput };\n\n  return (\n    <InputComponent\n      style={style}\n      onChangeText={handleChange}\n      hitSlop={{ top: 10, bottom: 10, left: 0, right: 0 }}\n      {...maskProps}\n      {...props}\n      {...customProps}\n    />\n  );\n};\n\nexport default CardInput;\n"]},"metadata":{},"sourceType":"module"}